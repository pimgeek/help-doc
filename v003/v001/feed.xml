<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Your awesome title</title>
    <description>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
</description>
    <link>/help-doc/v001/</link>
    <atom:link href="/help-doc/v001/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 25 Jun 2015 21:53:09 +0800</pubDate>
    <lastBuildDate>Thu, 25 Jun 2015 21:53:09 +0800</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Welcome to Jekyll!</title>
        <description>&lt;p&gt;You’ll find this post in your &lt;code&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Tom&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints &amp;#39;Hi, Tom&amp;#39; to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://github.com/jekyll/jekyll-help&quot;&gt;Jekyll’s dedicated Help repository&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Fri, 26 Jun 2015 02:02:56 +0800</pubDate>
        <link>/help-doc/v001/jekyll/update/2015/06/26/welcome-to-jekyll.html</link>
        <guid isPermaLink="true">/help-doc/v001/jekyll/update/2015/06/26/welcome-to-jekyll.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Business Insider 发布 The Future of Digital 2014 报告</title>
        <description>&lt;p&gt;有同事微信转发了一项近期发布的商业/市场报告，供我参考。&lt;/p&gt;

&lt;p&gt;我发现这个文章的标题党味道明显——【重磅消息！美国发布移动互联网未来报告】，所以又找了同样转载此文章的其它网站。&lt;/p&gt;

&lt;p&gt;找了一圈，发现这一篇至少从标题上看，更规矩一些：&lt;a href=&quot;http://www.domarketing.org/html/2014/report_1215/13101.html&quot;&gt;Business Insider 发布报告《移动互联网的未来》&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://img.teamkn.com/i/GaDUCL3X.png@400w.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;国内媒体的翻译版【大部分标记着有腾讯科技的水印】，但是从来都没有找到腾讯网的原文。后来，我发现腾讯跟 BI 是有合作关系的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://img.teamkn.com/i/qkgjw55s.png@400w.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;国内转载始终让人感觉混乱，我稍微追溯了一下外国媒体的原始出处：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.businessinsider.com/the-future-of-digital-2014-slide-deck-2014-12?op=1&quot;&gt;The Future of Digital 2014 (12月8日发布)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://img.teamkn.com/i/gqtMI5nW.png@400w.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://pan.baidu.com/share/link?shareid=1541811824&amp;amp;uk=288668836&quot;&gt;全文 PDF 下载地址&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 18 Dec 2014 00:00:00 +0800</pubDate>
        <link>/help-doc/v001/2014/12/18/business-insider-report.html</link>
        <guid isPermaLink="true">/help-doc/v001/2014/12/18/business-insider-report.html</guid>
        
        
      </item>
    
      <item>
        <title>文章翻译：开始使用 Sass 和 Compass</title>
        <description>&lt;p&gt;原文地址  - http://thesassway.com/beginner/getting-started-with-sass-and-compass&lt;/p&gt;

&lt;h1 id=&quot;sass--compass&quot;&gt;开始使用 Sass 和 Compass&lt;/h1&gt;

&lt;p&gt;看起来，你的朋友，同事，网上好友或某些别的人已经向你讲过关于 Sass 或 Compass 的事了 … 甚至是两样东西同时讲的。很好！但接下来该做些什么？在这篇针对初学者的入门指南中，我们将引导你完成上手使用 Sass 和 Compass 的头几步。具体说来，我们将助你完成工具安装，测试项目创建，编译第一段 Sass 与 Compass 代码等任务，甚至稍稍 “混杂” 一些 Sass 的历史。&lt;/p&gt;

&lt;h2 id=&quot;sass--compass-1&quot;&gt;安装 Sass 和 Compass&lt;/h2&gt;

&lt;p&gt;Sass 和 Compass 是通过 Ruby gem 的方式安装的，所以，你首先需要在自己的机器上安装 Ruby。&lt;/p&gt;

&lt;p&gt;如果你在 Windows 系统中，可以运行 &lt;a href=&quot;http://rubyinstaller.org/&quot;&gt;Ruby Installer&lt;/a&gt;。如果你在 Linux 系统中，那么 &lt;a href=&quot;https://github.com/joshfng/railsready&quot;&gt;Rails Ready&lt;/a&gt; 为你提供了许多 Ruby 的基本组件。如果你在 OS X 中，那么默认情况下 Ruby 应该已经安装好了，直接使用就 OK。&lt;/p&gt;

&lt;p&gt;让 Ruby 正常工作并不在本文的主要讨论范围内。所以，如果你碰到了任何障碍，请访问 &lt;a href=&quot;http://groups.google.com/group/sass-lang&quot;&gt;Sass 相关的邮件列表&lt;/a&gt;，找到对路的资源，让 Ruby 在你的机器上正常工作。&lt;/p&gt;

&lt;h3 id=&quot;sass&quot;&gt;安装 Sass&lt;/h3&gt;

&lt;p&gt;OK，让我们开始安装 Sass 吧！首先打开你的命令控制台 / 虚拟终端 (比如 &lt;a href=&quot;http://en.wikipedia.org/wiki/Apple_Terminal&quot;&gt;Terminal.app&lt;/a&gt;) 并敲入以下命令：&lt;/p&gt;

&lt;h4 id=&quot;windows&quot;&gt;Windows:&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;
gem install compass
&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;linux--os-x&quot;&gt;Linux / OS X:&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;
sudo gem install compass
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;对于 Linux 和 OS X 的朋友而言，是否要以 &lt;code&gt;sudo&lt;/code&gt; 用户安装 gem 取决于你的具体情况。比如说，如果你正在使用 &lt;a href=&quot;https://rvm.io/&quot;&gt;RVM&lt;/a&gt;，就不需要以 &lt;code&gt;sudo&lt;/code&gt; 用户安装 gem。&lt;/p&gt;

&lt;p&gt;OK，我了解你在想什么。先前说过我们要安装 Sass，但从前面的命令行看来，我们实际上在安装 Compass。为什么呢？情况是这样：Compass 依赖于 Sass （译者注：所以会自动安装 Sass），在运行这条命令时，你将会看到类似于下面的屏幕显示：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
$ sudo gem install compass
Fetching: sass-3.1.3.gem (100%)
Fetching: compass-0.11.3.gem (100%)
Successfully installed sass-3.1.3
Successfully installed chunky_png-1.2.0
Successfully installed fssm-0.2.7
Successfully installed compass-0.11.3
4 gems installed
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;如果运行命令之后，你看到的不是类似上面这样的输出，那么你机器上的 Ruby 或者 Ruby Gems 可能并没有正确安装。有关安装问题的过多细节在这里不便展开，不然就会超出本文的讨论范围。总之，遇到这种问题，还是建议你去 &lt;a href=&quot;http://groups.google.com/group/sass-lang&quot;&gt;Sass 相关的邮件列表&lt;/a&gt; 寻求帮助。&lt;/p&gt;

&lt;p&gt;如果你感觉自己被 &lt;a href=&quot;http://en.wikipedia.org/wiki/Command-line_interface&quot;&gt;命令行操作&lt;/a&gt; 给吓住了，不必紧张。&lt;a href=&quot;http://twitter.com/johnwlong&quot;&gt;John Long&lt;/a&gt; 写过一篇非常棒的入门文章，标题是：&lt;a href=&quot;http://wiseheartdesign.com/articles/2010/11/12/the-designers-guide-to-the-osx-command-prompt/&quot;&gt;“写给设计师的 OS X 命令行提示符操作入门”&lt;/a&gt;，这篇文章将帮你跟上本文的节奏。&lt;/p&gt;

&lt;p&gt;作为参考，我还在下面列出了两款专门针对 Sass / Compass 的基于图形界面的 App。但在这篇入门文章中，我们将假设你正在使用命令行方式进行操作。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://mhs.github.com/scout-app/&quot;&gt;Scout&lt;/a&gt; (跨平台) 由 &lt;a href=&quot;http://mutuallyhuman.com/&quot;&gt;Mutually Human&lt;/a&gt; 开发&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://compass.handlino.com/&quot;&gt;Compass.app&lt;/a&gt; (Windows/Linux/Mac OS X) 由 Handlino 开发.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;css-parser-css-&quot;&gt;CSS Parser (译者注：CSS 解析器)&lt;/h3&gt;

&lt;p&gt;我还愿意安装 &lt;a href=&quot;http://rubygems.org/gems/css_parser&quot;&gt;css_parser&lt;/a&gt; 以便充分利用其 &lt;code&gt;compass stats&lt;/code&gt; 的所有功能：输出关于我的 Sass 样式表的各种统计数据。具体说来，它将会输出一个报告，其中包括 Sass 的规则、属性、mixin 定义以及 CSS 规则与属性的条数。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;It outputs a report that gives a count of the Sass rules, properties, mixins defined and mixins used as well as the CSS rules and properties that get output from your Sass-stylesheets. (这句话需要咨询 @ben7th 才能正常译出)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;运行以下命令即可安装 &lt;code&gt;css_parser&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
gem install css_parser
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;现在，准备工作已经就绪，你可以开始一些实质性的 Sass 和 Compass 行动了！&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;创建一个测试项目&lt;/h2&gt;

&lt;p&gt;开始学习某种新事物的最佳方法，就是直接投入到具体操作中去。话说到此，现在就定位到你平时存放开发代码的位置吧（或者你打算存放这个测试项目的具体位置），然后运行下面这条命令：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
compass create sass-test
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;另一种可选方案是，直接用下面的命令从 GitHub 上的 &lt;a href=&quot;https://github.com/thesassway/sass-test&quot;&gt;the test project&lt;/a&gt; 项目直接抓取源码目录到自己选定的存储位置：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
git clone https://github.com/thesassway/sass-test.git
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;但我们不建议你这样做，不然就会完全破坏我们的学习目的——如何自行完成整个操作过程。&lt;/p&gt;

&lt;p&gt;OK，让我们继续前进。利用 (&lt;a href=&quot;http://en.wikipedia.org/wiki/Cd_(command)&quot;&gt;cd&lt;/a&gt;) 命令，把当前所在位置改变到最新创建的 &lt;code&gt;/sass-test&lt;/code&gt; 目录下方，然后用你最喜欢的编辑器打开它。我使用 &lt;a href=&quot;http://macromates.com/&quot;&gt;TextMate&lt;/a&gt;，但我一直在考虑试一试 &lt;a href=&quot;http://www.vim.org/&quot;&gt;Vim&lt;/a&gt; 或 &lt;a href=&quot;http://www.sublimetext.com/2&quot;&gt;Sublime Text 2&lt;/a&gt;。我们在 Changelog 网站上对 Vim 编辑器做了大量介绍，所以如果你对 Vim 感兴趣，可以看一眼 &lt;a href=&quot;http://search.aol.com/aol/search?s_it=topsearchbox.nrf&amp;amp;v_t=na&amp;amp;q=vim+site%3Athechangelog.com&quot;&gt;Changelog 站内关于 Vim 的网页搜索结果&lt;/a&gt; 以便深入研究。&lt;/p&gt;

&lt;h2 id=&quot;sass--css&quot;&gt;把 Sass 编译为 CSS&lt;/h2&gt;

&lt;p&gt;这是最简单的部分。所有艰难的工作都由 Sass 和 Compass 来完成，你只要运行下面的命令，让 Compass 做它该做的事就可以了。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
compass watch
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;如果前面的准备工作都没问题，你应当看到类似于下面这样的屏幕显示：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
$ sass-test git:(master) compass watch
FSSM -&amp;gt; An optimized backend is available for this platform!
FSSM -&amp;gt;     gem install rb-fsevent
&amp;gt;&amp;gt;&amp;gt; Compass is polling for changes. Press Ctrl-C to Stop.
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;如果这就是你屏幕上实际显示的内容，那么你可以大喊一声“耶”来祝贺自己了。因为现在各项准备都以就绪，你可以开始用 Sass 的方式编写 CSS 啦！&lt;/p&gt;

&lt;p&gt;&lt;code&gt;compass watch&lt;/code&gt; 这条命令所做的事情，正是你预想的那样——它会监测你的 Sass 文件内容变化（只监测文件被保存之后的内容变化）并把你的 Sass 代码自动编译为 CSS。那么，它怎么知道你的 Sass 代码在什么位置？又怎么知道编译生成的 CSS 文件又该放在哪里呢？这问题问得很好，未来我们将在另一篇标题为《配置 Compass》文章中详细讨论。&lt;/p&gt;

&lt;p&gt;与此同时，让我们看看位于 &lt;code&gt;sass-test&lt;/code&gt; 项目根目录下的 &lt;code&gt;config.rb&lt;/code&gt; 文件（译者注：可参考 &lt;a href=&quot;https://github.com/thesassway/sass-test/blob/master/config.rb&quot;&gt;config.rb&lt;/a&gt;）。这就是 &lt;a href=&quot;http://compass-style.org/help/tutorials/configuration-reference/&quot;&gt;Compass 的配置文件&lt;/a&gt;，基本上可以把它看做 Compass 的大脑，其中定义了一系列的变量名。有了这些变量，Compass 才能知道你的 Sass，CSS，图片文件以及 JavaScript 文件都放在什么位置，需要调用哪些扩展组件，你所偏好的语法格式和输出格式是什么样的等等，不一而足。&lt;/p&gt;

&lt;h2 id=&quot;sass-&quot;&gt;写一些 Sass 代码&lt;/h2&gt;

&lt;p&gt;在我们真正动手写 Sass 代码之前，了解一些关于它的历史是很重要的。事实上，关于 Sass 最难理解的就是它有两套 &lt;a href=&quot;http://en.wikipedia.org/wiki/Syntax&quot;&gt;语法&lt;/a&gt; ——初学 Sass 的朋友们通常会为此感到困惑或者畏惧，甚至碰上这种情况就打消了继续尝试的念头。为什么我了解这一点？因为我自己就曾忍痛啃过这块众所周知的硬骨头，我当时的感受与这些人如出一辙。但现在为了避免偏题，我们还是言归正传吧。&lt;/p&gt;

&lt;p&gt;Sass 就像 CSS 一样。好吧，这么说有点误导。Sass &lt;strong&gt;在某些方面可以像&lt;/strong&gt; CSS 一样。前文提到过，Sass 有一些历史，它曾有过不止一套语法。其中的一套语法甚至也叫做 “Sass”，这就更叫人困惑了。现在我澄清一下，主要的一套语法被称作 “SCSS”（这个缩写表示 “Sassy CSS”），它是在 Sass 3 推出后开始使用的新语法。而早一些的语法（我曾提到的那段历史的一部分）被称作 &lt;strong&gt;缩进式语法&lt;/strong&gt;（或者简称 “Sass”）。 – 此处需要 @ben7th 确认.&lt;/p&gt;

&lt;p&gt;既然我们已经简要介绍了 Sass 的历史，也说明了它有两套语法的事实，那么接下来我相信你已经做好写 Sass 代码的准备了。其实，我应该说 SCSS ——因为 SCSS 与 CSS 很相似，它的语法是作为 CSS3 样式表的语法扩展而被设计出来的。这意味着每个合法的 CSS3 样式表同时也是一个合法的 SCSS 样式表。实际上，你可以把某个 CSS 文件的内容复制粘贴到一个 SCSS 文件中，经过编译之后，仍然能够得到干净的 CSS。&lt;/p&gt;

&lt;p&gt;下面让我们测试一下上述“理论”，把我们的博客网站正在使用的 &lt;a href=&quot;http://thesassway.com/css/master.css&quot;&gt;css 文件&lt;/a&gt; 复制粘贴到我们的测试项目中的 &lt;code&gt;sass-test/sass/screen.scss&lt;/code&gt; 文件内（译者注：可参考 &lt;a href=&quot;https://github.com/thesassway/sass-test/blob/scss-is-like-css/sass/screen.scss&quot;&gt;screen.scss&lt;/a&gt;），保存后运行 &lt;code&gt;compass compile&lt;/code&gt; 命令。此后，再仔细看一看 &lt;code&gt;sass-test/stylesheets/screen.css&lt;/code&gt; 这个文件（译者注：可参考 &lt;a href=&quot;https://github.com/thesassway/sass-test/blob/scss-is-like-css/stylesheets/screen.css&quot;&gt;screen.css&lt;/a&gt;），就会发现 Sass 与 Compass 已经把经过压缩的不可读的 CSS 内容编译过了，形成了一份可读的，完美地缩进过的 CSS 文件。而且，还伴随着原始代码文件中包含的用于排除故障而写的代码注释。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;结论和接下来的步骤&lt;/h2&gt;

&lt;p&gt;很显然，这里给出的例子并不是最实用的，而且严格说来我们根本没写任何代码。我想通过这个例子证明的是：从编写 CSS 代码转换到编写 Sass 代码，在某些情况下可以说几乎是零成本的，因为你刚才就已经亲自实现了这种转换。&lt;/p&gt;

&lt;p&gt;接下来的步骤就是充分了解  &lt;a href=&quot;http://sass-lang.com/tutorial.html#features&quot;&gt;Sass&lt;/a&gt; 和 &lt;a href=&quot;http://compass-style.org/&quot;&gt;Compass&lt;/a&gt; 的各种特性，在需要的时候选择其中的一部分为自己所用。这是转换到 Sass 的最有利的一点——你可以循序渐进地触及 Sass 和 Compass 为你提供的诸多好处，而不必抱有畏难情绪，担心你需要花上“个把星期”才能学会它……&lt;/p&gt;

&lt;p&gt;开始行动吧，现在立刻开始。&lt;/p&gt;
</description>
        <pubDate>Wed, 01 Jan 2014 00:00:00 +0800</pubDate>
        <link>/help-doc/v001/2014/01/01/use-sass-and-compass.html</link>
        <guid isPermaLink="true">/help-doc/v001/2014/01/01/use-sass-and-compass.html</guid>
        
        
      </item>
    
      <item>
        <title>文章翻译：Sass 的方式-初学者部分</title>
        <description>&lt;p&gt;原文地址： http://thesassway.com/beginner&lt;/p&gt;

&lt;h1 id=&quot;section&quot;&gt;初学者部分&lt;/h1&gt;

&lt;h2 id=&quot;sass--compass---&quot;&gt;关于 Sass 和 Compass 的初学者入门 &amp;amp; 辅导教程&lt;/h2&gt;

&lt;h3 id=&quot;section-1&quot;&gt;选择好的变量名&lt;/h3&gt;

&lt;p&gt;有了 Sass 中的变量，我们更容易重复利用那些常用属性值了。但是，如果你在为变量命名时不够小心谨慎，那么这些变量名就会急剧扩散达到失控的地步。现在，Frank S 在 &lt;strong&gt;Sass 的方式&lt;/strong&gt; 发布了首篇文章，在文章中他给出了一些关于为变量命名的有用的建议。【阅读详细内容…】&lt;/p&gt;

&lt;h3 id=&quot;sass-&quot;&gt;如何安排一个 Sass 项目的目录结构&lt;/h3&gt;

&lt;p&gt;借助 Sass 加工 CSS 代码的方法有很多好处，其中最棒的一点就是：你可以构建一个目录结构，并用它把你的各类组件放在正确的位置上。&lt;strong&gt;但是&lt;/strong&gt;，问题来了 … 哪里才是正确的位置？有没有一种用来安排 Sass 项目的文件结构到的标准方法？【阅读详细内容…】&lt;/p&gt;
</description>
        <pubDate>Wed, 01 Jan 2014 00:00:00 +0800</pubDate>
        <link>/help-doc/v001/2014/01/01/sass-way-beginner.html</link>
        <guid isPermaLink="true">/help-doc/v001/2014/01/01/sass-way-beginner.html</guid>
        
        
      </item>
    
      <item>
        <title>如何高效地使用电脑和网络</title>
        <description>&lt;p&gt;随着信息时代的来临，电脑和互联网正在改变人们的生活方式，它们使得信息的发布、获取和传播逐渐变得更加便利，而包罗万象的信息也已经像自来水一样成为众多普通家庭的基础设施。然而，电脑这个自来水龙头并不像想象中那么简单，许多熟练掌握电脑的人并未使其成为方便自己生活和工作的工具，却常常成为海量信息的奴隶——视频和图片网站、网络游戏、即时聊天、在线论坛等网络设施极力促使用户上网成瘾，部分商家却从所谓的”眼球经济”中大发横财。&lt;/p&gt;

&lt;p&gt;在这种情况下，我们不得不认真面对”如何高效地使用电脑和网络”的问题，相信对这个问题的深入思考能够使每位频繁使用电脑和网络的读者受益。下面是我个人的一些经验，仅供参考。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;不要把熟练操纵电脑或在网络上任意驰骋当作根本目的，想想自己面临的首要问题是什么，电脑和互联网能为问题的解决做多大贡献，漫无目的地使用电脑与网络，使用越熟练越容易成瘾。&lt;/li&gt;
  &lt;li&gt;用电脑工作前应循序思考下面几个问题：下一步工作是什么，当前面临的首要问题是什么，有助于问题的解决但尚未完成的工作有哪些，已经完成的有哪些。在电脑上可以做的工作太多了，不把这些问题放在心上就会很快忘记主要工作。&lt;/li&gt;
  &lt;li&gt;在电脑旁放上一张纸，一支笔。想问题时先在纸上简单勾画一番，形成大体思路后再录入电脑。无须担心好的想法会转瞬即逝，真正有价值的想法是长期思考积累得来，必将在头脑中反复出现并逐渐清晰。&lt;/li&gt;
  &lt;li&gt;使用网络前先将需要了解的主题列成清单，上网时优先搜索清单上的内容而非其它无关信息。记住无关信息永远多得超出想象，而商家是非常希望您浏览那些无关信息的。&lt;/li&gt;
  &lt;li&gt;浏览网页时尽量不要点击与主题无关链接，读完一篇文章并获得主要信息之前不要过多地点击页内链接。最糟糕的不仅是被无关信息干扰，还包括被海量的相关信息弄迷糊。要避免这种情况发生，就不要随意打断自己的思路。&lt;/li&gt;
  &lt;li&gt;有问题，找 Google。问题比较复杂时，将其分解为子问题后再用 Google 搜索。&lt;/li&gt;
  &lt;li&gt;电脑和网络的作用是加工和传播信息，但它们并不能代替人成为思考工具。信息和知识管理软件可帮助人们发现更多文档间的内在联系，但只有亲自阅读才能进入头脑成为可用的知识。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;参考阅读：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;“软瘾”就这样吞噬着我们&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 21 Feb 2007 00:00:00 +0800</pubDate>
        <link>/help-doc/v001/2007/02/21/%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E5%9C%B0%E4%BD%BF%E7%94%A8%E7%94%B5%E8%84%91%E5%92%8C%E7%BD%91%E7%BB%9C.html</link>
        <guid isPermaLink="true">/help-doc/v001/2007/02/21/%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E5%9C%B0%E4%BD%BF%E7%94%A8%E7%94%B5%E8%84%91%E5%92%8C%E7%BD%91%E7%BB%9C.html</guid>
        
        <category>笔记管理, 软件工具</category>
        
        
      </item>
    
      <item>
        <title>我用过的笔记管理软件</title>
        <description>&lt;pre&gt;&lt;code&gt;上网成为习惯以后，人们每天都在面临海量信息的冲击，用信息爆炸来形容一点也不为过。在层出不穷的链接面前，两三个鼠标点击就可能让您完全忘记原来试图寻找的东西。在这种情况下，最直观的想法大概是留下一些笔记，写下自己最初寻找的东西和所处的位置。而为了更好地管理这些笔记，您可能需要一款好用的笔记管理软件。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我尝试过的笔记管理软件有好多种，它们大概可以分成以下几类（这里列举的绝大多数软件都是 Windows 平台下的，在 Mac 平台下这类软件似乎多，因为还没有 Mac 机器所以暂时没有体验）：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;树型大纲类：这类软件是最常见的，类似 Windows 中的资源管理器，只不过把文件夹换成了笔记节点，每个节点可以存储一些笔记信息。我用过的有电子日记本中的资料库，资料收藏大师, MyBase, MyInfo, TreeDBNotes, GoldenSectionNotes 等等。别看有这么多，后面几款外国软件功能大同小异。在购买资料收藏大师之前，我使用时间最长的是 MyBase，因为它在同类软件里面相对稳定，还能把笔记内容导出为电子书和静态网站，比较不错。后来购买资料收藏大师是因为它在摘录网页内容方面很高效，除去只能单机存储的限制外，可以和 GoogleNotebook 相媲美。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;日记本类：像写日记一样，每天记录当天的信息，无需分类整理，使用比较简单，白日梦工作室的 电子日记本 是个非常不错的选择。老虎庙特别为这个软件写过推荐文章。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;维基类：了解维基的人都知道，可以通过简单的语法在任何一个维基页面中加链接。可以链接到另一个维基页面，也可以链接到一个网页，或者本地文件。这种功能特别适合实现词典或百科全书的交叉引用。但是，有没有人想过可以用这个做个人信息管理呢？（Personal Information Management, PIM）这类软件的代表是 WikidPad，Wikit，TiddlyWiki 等等。这类软件中 WikidPad 是最成熟的，而且作者推出新版本的速度也是非常惊人，喜爱维基概念的朋友不妨试试看。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;脑图类：这类软件通常设计精巧，界面炫酷，强调信息之间的互联和概念的形象化表现。我对这类软件着迷了一阵子，后来发现这种软件适合给别人展示，实用性稍微差一些。PersonalBrain，CMapTools，FreeMind 是这一类的代表。其中 PersonalBrain 是最具特色的，软件体积很小，概念也很简单，每个笔记节点有三个链接点可以同其它节点相连，众多的节点构成一个类似大脑的知识网络，在节点间跳转时还有动画效果（可以在其官方网站首页查看，需 java 支持）。全文搜索也很完善，对中文支持很好。CMapTools 也不错，可惜太过专业了一些，体积庞大而且功能复杂。关于 FreeMind 的介绍请看这里。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;头脑风暴类：不太了解头脑风暴的理论，估计是通过发散式思维获得一些新点子吧，这方面有一款不错的软件 Brainstormsw，它的设计目标是让用户想到哪就写到哪，不会被多余的功能打断思路。这个想法很棒，可惜软件默认的快捷键不太符合 Windows 用户的习惯，算是美中不足吧。已经有段时间没有关注这个软件，新版本应该会有许多改进。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;麻袋类：这一类比较有意思，不依赖树型大纲，也不做相互链接，只是把需要记录的信息像装麻袋一样存入数据库，并用必要的标签 Tag 标示，需要查阅的时候按标签浏览或者全文搜索即可。我也是最近才找到一款这样的软件，Evernote。我非常欣赏它的设计，所有笔记都排列在一条长长的”纸带”上，并可根据指定的条件只显示用户比较关心的若干条笔记。这样一来，添加新笔记的时候不必为放置在哪个树枝上、跟谁互链而苦恼了，只要加个言简意赅的标签即可。关于 Evernote 的详细介绍可以看这里。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;面对这么多软件该如何选择呢？相信不同的人有不同的考虑。我的选择标准有以下几方面，仅供参考：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;最好是免费的。有个性的笔记软件太多了，如果见一个就买很可能会后悔。试用版又往往有很多限制，还是选免费的比较好。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;最好是绿色免安装的。既然是记笔记，最好能够随身携带。如果换台机器还要安装一下就不爽了。事实上，免费软件通常都是免安装或者很容易”绿化”的。前面提到的电子日记本，WikidPad，Wikit，TiddlyWiki，CMapTools，Freemind 都是免费而且可自由拷贝的。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;一定要基于 Unicode。很多不错的国外笔记软件都没有做好这方面工作，不接受中文输入，搜索中文字符串没有效果等等，非常遗憾。对中文支持较好的有电子日记本，资料收藏大师，MyBase, WikidPad, Wikit, TiddlyWiki, Freemind 等，Evernote 虽然在显示中文时不会乱码，但在输入中文的时候有一些 Bug。其它软件在中文方面的 Bug 还多一些。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;一定要管理方便。增加、删除、修改、查阅笔记信息都应非常快捷，否则还不如靠纸笔手写呢。在查阅方面特别强调一下，最好能够同时查看多页相关笔记。我们平时看资料的时候都是几本书放在一块对照着看，因为有些内容要联系起来阅览才好理解。可惜多数软件和网站都没有特别考虑这一体验。我觉得这方面 TiddlyWiki 是比较不错的，只可惜它的存储方式太简陋了，一个静态网页存储所有信息，内容多起来根本没法处理。Evernote 则更胜一筹，增删改查都很方便，还可以同时阅览若干篇笔记而不必来回切换。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;一定要有基本的加密功能。散乱的笔记中难免混杂一些私人信息，一旦系统遭到入侵，所有信息都暴露出去可不是好玩的。值得庆幸的是许多笔记软件都照顾到这方面，有些做到了分支内容加密，有些做到了单篇笔记加密。加密功能比较好的有电子日记本，MyBase, Evernote, TreeDBNotes 等。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;最好有导入导出功能。就是把笔记信息批量地在软件自定的数据库和通用数据格式之间快速转换。万一哪天要改用别的软件的话，很容易把信息转移到新的数据库中。这方面资料收藏大师和 MyBase 很不错，Evernote 可将笔记导出为 XML，如果编程很熟练的话转换起来就非常自由了。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Tue, 30 May 2006 00:00:00 +0800</pubDate>
        <link>/help-doc/v001/2006/05/30/note-taking-software-i-used.html</link>
        <guid isPermaLink="true">/help-doc/v001/2006/05/30/note-taking-software-i-used.html</guid>
        
        <category>mind</category>
        
        
      </item>
    
  </channel>
</rss>
