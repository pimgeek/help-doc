
[

    
        
    
        
            
        
            
        
            
        
    

    
        
    
        
            
            {
                "title": "jekyll-environment-setup",
                "content": "设置 jekyll 文档站运行环境的大致步骤如下：\n\n1 启动虚拟机并执行下面的命令\n\ngem install jekyll\n我使用的 Ruby 和 Jekyll 环境如下： Jekyll 2.5.3 , ruby 2.2.0p0 (2014-12-25 revision 49005) [x86_64-linux]）\n\n\n2 确保 jekyll 安装无误后，按序进行以下操作\n\n2.1 创建 jekyll 工作目录\n\nmkdir redo-help-doc\nmkdir redo-help-doc/_src\nmkdir redo-help-doc/v009\n\n\n2.2\n\n创建 jekyll 配置文件 _config.yml\n\nvim redo-help-doc/_config.yml\n\n# 修改 `redo-help-doc/_config.yml` 文件的内容，加入以下配置：\nbaseurl: &quot;/redo-help-doc&quot;\nsource: &quot;_src&quot;\ndestination: &quot;v009&quot;\nmarkdown: redcarpet\nredcarpet:\n  extensions:\n  - fenced_code_blocks\n  - footnotes\nsass:\n  style: :compressed\n  sass_dir: _css\n\n\n2.3 试运行\n\n在 redo-help-doc 目录下执行 jekyll s -H 0.0.0.0 ，\n然后打开网址 http://192.168.1.32:4000/redo-help-doc/v009/ 进行预览\n\n特别说明 #\n\n\n因为 lunrjs 是作为 jekyll 插件的形式发挥作用的，而 github pages 目前不支持带插件输出静态网页，所以我选择在本地 redo-help-doc/v009/ 目录下生成所有静态文件，然后直接把静态文件 push 到 github 版本库的 gh-pages 分支。\n_config.yml 中的 exclude: [&#39;dir&#39;] 设置可以阻止 github pages 输出 dir 目录下的静态网页。利用这个机制，可以把 redo-help-doc/ 目录中一些不相干的内容屏蔽，避免输出到 username.github.io/redo-help-doc/... 。\n\n\n下一篇文档将从这个空白的 jekyll 源码目录开始，通过一系列操作增加各个 feature。\n",
                "link": "/articles/jekyll-environment-setup.html",
                "date": "",
                "excerpt": "",
                "seach_omit": ""
            }
            
            
        
            
            ,{
                "title": "jekyll-source-code-dir-struct",
                "content": "为了实现 GitHub Help 与 Facebook React Doc 中包含的一系列 feature，需要形成大致如下图所示的目录结构：\n\nredo-help-doc/\n├── _src\n│   ├── _categories\n│   │   └── mindpin-docs.md\n│   ├── css\n│   │   └── ...\n│   ├── _css\n│   │   └── ...\n│   ├── _data\n│   │   └── conrefs.yml\n│   ├── _help_doc_research\n│   │   └── yyyy-mm-dd-xxx-xxx-xxx.md\n│   ├── img\n│   │   └── ...\n│   ├── _includes\n│   │   ├── category-links.html\n│   │   ├── coll-selector.html\n│   │   ├── search.html\n│   │   ├── sidebar.html\n│   │   └── sub-articles.html\n│   ├── js\n│   │   ├── jquery.lunr.search.js\n│   │   ├── lunr.min.js\n│   │   └── search.min.js\n│   ├── _layouts\n│   │   ├── category.html\n│   │   ├── default.html\n│   │   ├── page.html\n│   │   └── post.html\n│   ├── _plugins\n│   │   └── jekyll_lunr_js_search.rb\n│   ├── _posts\n│   │   └── yyyy-mm-dd-xx-yyy-zzzz.md\n│   ├── search\n│   │   └── index.html\n│   └── index.md\n└── _config.yml\n\n\n下面将列举出逐项添加这些 feature 的具体操作步骤：\n\n1 从 GitHub 版本库 clone help-doc 示例项目，并切换到 gh-pages 分支\n\ngit clone https://github.com/pimgeek/help-doc\ncd help-doc\ncheckout gh-pages\n\n\n2 返回到新创建的 redo-help-doc/ 目录下，严格按顺序执行如下操作：\n\n2.1 创建 index 页\n\ncd redo-help-doc/\njekyll s -H 0.0.0.0 &amp;\ncp ../help-doc/_src/index.md \n\n\n此时 jekyll 应提示:\n\nBuild Warning: Layout &#39;default&#39; requested in index.md does not exist\n\n\nmkdir ../help-doc/src/layouts\ncp ../help-doc/src/layouts/default.html src/layouts/\n\n此时 jekyll 应提示 #Liquid Exception: Included file &#39;_includes/sidebar.html&#39; not found in _layouts/default.html #\n\nmkdir ../help-doc/src/includes\ncp ../help-doc/src/includes/sidebar.html src/includes/\n\n此时 jekyll 应提示 #Liquid Exception: Included file &#39;_includes/search.html&#39; not found in _layouts/default.html #\n\ncp ../help-doc/src/includes/search.html src/includes/\nvim src/includes/search.html\n\n修改其中的这一行，把其中的 &quot;/help-doc/v008&quot; 改为当前 jekyll #_config.yml 中指定的 &quot;/redo-help-doc/v009&quot;： #\n\n\n  \n  \n\n\n此时 jekyll 无错误提示 #可以打开 http://192.168.1.32:4000/redo-help-doc/v009/ 查看效果 #\n\nmkdir src/posts\ncp ../help-doc/src/posts/3012-01-01-help-doc-research.md src/posts\n\n此时 jekyll 应提示 #Build Warning: Layout &#39;post&#39; requested in _posts/3012-01-01-help-doc-research.md does not exist. #Liquid Exception: Included file &#39;_includes/coll-selector.html&#39; not found in not found in _includes/sidebar.html, included in _layouts/default.html #\n\ncp ../help-doc/src/layouts/post.html src/layouts/\ncp ../help-doc/src/includes/coll-selector.html src/includes\n\n此时 jekyll 无错误提示 #可以打开 http://192.168.1.32:4000/redo-help-doc/v009/ 查看效果 #\n\nvim _config.yml\n\n修改 _config.yml，在文档末尾追加以下内容 #为了让文档 URL 符合 GitHub 的 /articles/xxx.html 形式 #\n\npermalink: /articles/:title.html\n\ncollections:\n  # 为了实现分类汇总而设置 category collection\n  categories:\n    output: true\n    permalink: /categories/:path/\n  # 下面这些都是为了呈现子文档列表而设置的\n  helpdocresearch:\n    output: true\n    permalink: /articles/:title.html\n\n保存修改后，执行下面的命令： #\n\njobs\n\n接下来，应看到类似如下的提示 #[1]+  Running                 jekyll s -H 0.0.0.0 &amp; #如果 jekyll 所在的那一行的 Running 前面是 [2] #则把下列命令改为 fg %2，以此类推。 #\n\nfg %1 \n\n接下来，应看到类似如下的提示 #jekyll s -H 0.0.0.0 #点击 Ctrl+C 退出，然后再次执行下列命令 #\n\njekyll s -H 0.0.0.0 &amp;\n\n此时 jekyll 应提示 #Liquid Exception: Included file &#39;_includes/sub-articles.html&#39; not found in _includes/coll-selector.html, included in _layouts/post.html #\n\ncp ../help-doc/src/includes/sub-articles.html src/includes/\njekyll s -H 0.0.0.0\n\n此时 jekyll 无错误提示 #可以打开 http://192.168.1.32:4000/redo-help-doc/v009/ 查看效果 #\n\ncp ../help-doc/src/helpdocresearch/* src/helpdocresearch/\n\n此时 jekyll 无错误提示 #等待 5 秒钟左右，打开 http://192.168.1.32:4000/redo-help-doc/v009/ 查看效果 #接下来，尝试在浏览器中打开以下网页 #http://192.168.1.32:4000/redo-help-doc/v009/categories/mindpin-docs #此时浏览器应提示 #Not Found #`/redo-help-doc/v009/categories/mindpin-docs&#39; not found. #\n\nmkdir src/categories\ncp ../help-doc/src/categories/mindpin-docs.md src/categories/\n\n此时 jekyll 应提示 #Liquid Exception: Included file &#39;_includes/category-links.html&#39; not found in _categories/mindpin-docs.md #\n\ncp ../help-doc/src/includes/category-links.html src/includes/\n\n此时 jekyll 应提示 #Build Warning: Layout &#39;category&#39; requested in _categories/mindpin-docs.md does not exist. #\n\ncp ../help-doc/src/layouts/category.html src/layouts/\n\n此时 jekyll 无错误提示 #接下来等待 5 秒钟左右，再次尝试在浏览器中打开以下网页 #http://192.168.1.32:4000/redo-help-doc/v009/categories/mindpin-docs #此时应当在网页的右半部分看到如下内容 #Category / Mindpin docs #* Help Doc 相关调研 #* 用 Jekyll 实现纯前端搜索 #* GitHub Help 内容架构 #* 用 Jekyll 模拟 GitHub Help #* conref 使用效果展示 #接下来，尝试打开下面的网页 #http://192.168.1.32:4000/redo-help-doc/v009/articles/conref-usage-sample.html #此时应当在网页的右半部分看到如下内容 #下列文字使用了 conrefs 引用： #---- #子文档列表 #---- #&lt;- prev #\n\nmkdir src/data\ncp ../help-doc/src/data/conrefs.yml src/data/\n\n此时 jekyll 无错误提示 #接下来等待 5 秒钟左右，再次尝试在浏览器中打开以下网页 http://192.168.1.32:4000/redo-help-doc/v009/articles/conref-usage-sample.html #网页载入完毕后，将能够看到与上一次浏览此页时，明显不一样的内容 #下列文字使用了 conrefs 引用： #这段文字来自 jekyll 源码目录下的 _data 目录下的 conrefs.yml。 #…… #接下来，尝试在网页右半部分的搜索框中搜索 facebook 关键字 #回车确认后，将打开以下网页超链接： #http://192.168.1.32:4000/redo-help-doc/v009/search?q=facebook #此时浏览器应显示以下内容： #Not Found #`/redo-help-doc/v009/search&#39; not found. #\n\nmkdir src/search\ncp ../help-doc/src/search/index.html _src/search/\n\n此时 jekyll 应提示 #Build Warning: Layout &#39;page&#39; requested in search/index.html does not exist. #\n\ncp ../help-doc/src/layouts/page.html src/layouts/\nmkdir src/plugins\ncp ../help-doc/src/plugins/jekylllunrjssearch.rb _src/plugins\nmkdir src/js\ncp ../help-doc/src/js/jquery.lunr.search.js src/js/\ncp ../help-doc/src/js/lunr.min.js src/js/\ncp ../help-doc/src/js/search.min.js _src/js/\n\n完成上述操作后，执行下面的命令： #\n\njobs\n\n接下来，应看到类似如下的提示 #[1]+  Running                 jekyll s -H 0.0.0.0 &amp; #\n\nfg %1 \n\n接下来，应看到类似如下的提示 #jekyll s -H 0.0.0.0 #点击 Ctrl+C 退出，然后再次执行下列命令 #\n\njekyll s -H 0.0.0.0 &amp;\n\n此时 jekyll 无错误提示 #接下来等待 5 秒钟左右，再次尝试在网页右半部分的搜索框中 #搜索 facebook 关键字。回车确认后，将打开以下网页超链接： #http://192.168.1.32:4000/redo-help-doc/v009/search?q=facebook #此时浏览器应显示以下内容： #Search results #help-doc-research #其中，help-doc-research 是一个超链接，点击后 #将进入包含 facebook 关键词的文档页面。 #最后，把用于提升显示效果的图片与 Sass/CSS 等静态文件复制过来 #\n\ncp -r ../help-doc/src/css _src/\ncp -r ../help-doc/src/css _src/\ncp -r ../help-doc/src/img _src/\n\n接下来等待 5 秒钟左右，然后打开以下网页超链接： #http://192.168.1.32:4000/redo-help-doc/v009/ #http://192.168.1.32:4000/redo-help-doc/v009/articles/jekyll-frontend-search.html #将会看到增加了皮肤和代码高亮效果的网页 #到目前为止，以上操作命令已经把涉及到 /article/xxx 格式的文档链接，文档分类汇总页，子文档列表页，lunrjs 纯前端搜索，conref 内容复用，GitHub Flavored Markdown 支持 等 6 项 feature 的代码文件都触及了。\n\n前置和后继文档的功能相对简单，只要在 _config.yml 文件中定义好 permalink 格式，再在模板源码中利用每篇文档的 Front Matter slug —— title, prev-post 和 next-post 等字段动态创建超链接即可实现。\n\n从下一篇文档开始，我将把上述 7 种 feature 的复现步骤单独列出来，以便阅读者有选择地复现其中的一部分 feature。\n\n",
                "link": "/articles/jekyll-source-code-dir-struct.html",
                "date": "",
                "excerpt": "",
                "seach_omit": ""
            }
            
            
        
            
            ,{
                "title": "create-new-articles",
                "content": "创建新文档并不是前文所述的 7 种实用 feature 之一，但在创建新文档时，要遵循一定格式，才能激活相关的 feature。考虑到创建文档是文档撰写者最先引起关注的操作，所以首先介绍。\n\n1 如果仅希望创建不带子文档的文档，直接以 markdown 源码形式放入 help-doc/_posts 下面。 help-doc/_posts 目录下的 Front Matter 遵循以下格式：\n\n---\nlayout: post\ncategories: [&#39;category_name&#39;]\nreader-title: XXX XXXX\ntitle: article-url-name\nprev-post: previous-article-url-name.html\nnext-post: next-article-url-name.html\n---\n\n文档正文\n\n\n\n如果无特殊考虑，layout 的取值总是 post\n如果希望当前文档在左侧导航栏中被列入某个特定的分类，就在 categories 中加入这个分类，比如 categories: [&#39;mindpin docs&#39;]\nreader-title 可以包含中文或其它 UTF-8 字符\ntitle 以英文数字、字母和连字符组成，用于生成当前文档的 permalink，title 的取值与前置、后继文档 feature 相关。\nprev-post 与 next-post 以英文数字、字母和连字符组成，用于生成当前文档的前置文档和后继文档链接。\n\n\nprev-post 的取值应当是实际的前置文档 title + &#39;.html&#39;\nnext-post 的取值应当是实际的后继文档 title + &#39;.html&#39;\n\n\n\n特别说明 #\n\nJekyll 2.5.3 所使用的 Liquid 模板语法在调用变量值时支持使用 filter 例如：{{ var1 = var2 | downcase}}，但有些 filter 存在问题，比如 strip, lstrip, rstrip 三个 filter 工作均不正常。\n\n下一篇文档将介绍具体的 feature。\n",
                "link": "/articles/create-new-articles.html",
                "date": "",
                "excerpt": "",
                "seach_omit": ""
            }
            
            
        
            
            ,{
                "title": "enable-category-index-page",
                "content": "本文档主要讲解如何利用 jekyll 的内置功能自动生成文档的分类汇总页。\n\n1 首先要给分类起一个名字，比如 &#39;mindpin docs&#39;\n\n2 其次要在 _config.yml 配置文件中定义一个 collection，名为 categories, 并且带有以下参数设置：\n\ncategories:\n  output: true\n  permalink: /categories/:path/\n\n\n3 再次，在 _src 目录中创建一个子目录，名叫 _categories\n\n4 第四，在 _categories 目录下创建一个 markdown 源码文件，名叫 mindpin-docs.md ，其内容为\n\n---\nlayout: category\n---\n\n{% assign cat-title-array=page.url | split:&#39;/&#39; %}\n{% assign cat-title=cat-title-array[2] | replace:&#39;-&#39;,&#39; &#39; %}\n{% assign cat-obj=site.categories[cat-title] %}\n\n{% include category-links.html which-cat=cat-obj %}\n\n\n5 第五，因为 mindpin-docs.md 中包含了 category-links.html 文件，所以要在 _includes 目录下增加这个文件，其内容为：\n\n&lt;div&gt;\n  &lt;ul&gt;\n    {% for post in include.which-cat reversed %}\n      &lt;li&gt;\n        &lt;b&gt;&lt;a class=&quot;post-link&quot; href=&quot;{{ post.url | prepend: site.baseurl | prepend: site.url}}&quot;&gt;{{ post.reader-title}}&lt;/a&gt;&lt;/b&gt;\n        &lt;!-- 如果 post 对应的文档在 _config.yml 和 _src 目录下\n             有对应的 collection 定义，就把它的子文档列举出来。--&gt;\n        {% include coll-selector.html post-url=post.title %}\n      &lt;/li&gt;\n    {% endfor %}\n  &lt;/ul&gt;\n&lt;/div&gt;\n\n\n6 第六，因为 category-links.html 文件包含了 coll-selector.html 所以要在 _includes 目录下增加这个文件，其内容为：\n\n{% assign post-id = include.post-url | replace:&#39;.html&#39;,&#39;&#39; | replace:&#39;-&#39;,&#39;_&#39; | downcase %}\n{% if site.collections[post-id].label == post-id %}\n  {% assign coll-obj = site.collections[post-id].docs %}\n  {% include sub-articles.html which-coll=coll-obj %}\n{% endif %}\n\n\n7 第七，因为 coll-selector.html 文件包含了 sub-articles.html 所以要在 _includes 目录下增加这个文件，其内容为：\n\n&lt;ul&gt;\n  {% for post in include.which-coll %}\n    &lt;li&gt;&lt;a class=&quot;post-link&quot; href=&quot;{{ post.url | prepend: site.baseurl | prepend: site.url}}&quot;&gt;{{ post.reader-title}}&lt;/a&gt;&lt;/li&gt;\n  {% endfor %}\n&lt;/ul&gt;\n特别说明： #\n分类文章汇总功能是借助模板参数传递机制实现的。include 可以传递参数给被包含的模板，用法如下。\n* 在发起包含请求的模板中，使用语法 {% include tmpl.html var=&#39;abc&#39; %}，\n* 在被包含的模板 tmpl.html 中要用 {{ include.var}} 或者 {% include.var %} 这种形式去访问传进来的参数\n\n这样一来，传入的变量与非传入变量就不会混淆。请参考 请参考 http://jekyllrb.com/docs/templates/ 中的 ProTip：Use variables as file name 了解更多细节。\n\n5 最后，在 _posts 目录下创建文章，yyyy-mm-dd-article-name.md , 其内容为\n---\nlayout: post\ncategories: [&#39;mindpin docs&#39;]\nreader-title: XXX XXX\ntitle: article-name\nprev-post: ...\nnext-post: ...\n---\n\n正文部分\n……\n\n\n接下来的文档将介绍其它实用 feature 的实现步骤。\n",
                "link": "/articles/enable-category-index-page.html",
                "date": "",
                "excerpt": "",
                "seach_omit": ""
            }
            
            
        
            
            ,{
                "title": "enable-sub-article-listing",
                "content": "本文档主要讲解如何利用 jekyll 的内置功能自动生成当前文档的子文档列表（如果当前文档无子文档，则列表显示为空）。\n",
                "link": "/articles/enable-sub-article-listing.html",
                "date": "",
                "excerpt": "",
                "seach_omit": ""
            }
            
            
        
            
            ,{
                "title": "operation-manual-for-ben7th",
                "content": "设置 jekyll 文档站运行环境的大致步骤如下：\n\n1 启动虚拟机并执行下面的命令 #gem install jekyll\n我使用的 Ruby 和 Jekyll 环境如下： Jekyll 2.5.3 , ruby 2.2.0p0 (2014-12-25 revision 49005) [x86_64-linux]）\n2 创建 jekyll 工作目录 #mkdir redo-help-doc\nmkdir redo-help-doc/_src\nmkdir redo-help-doc/v009\n3 创建 jekyll 配置文件 _config.yml #vim redo-help-doc/_config.yml\n\n# 修改 `redo-help-doc/_config.yml` 文件的内容，加入以下配置：\nbaseurl: &quot;/redo-help-doc/v009&quot;\nsource: &quot;_src&quot;\ndestination: &quot;v009&quot;\nmarkdown: redcarpet\nredcarpet:\n  extensions:\n  - fenced_code_blocks\n  - footnotes\nsass:\n  style: :compressed\n  sass_dir: _css\n特别说明 #\n\n因为 lunrjs 是作为 jekyll 插件的形式发挥作用的，而 github pages 目前不支持带插件输出静态网页，所以我选择在本地 redo-help-doc/v009/ 目录下生成所有静态文件，然后直接把静态文件 push 到 github 版本库的 gh-pages 分支。\n\n4 从 GitHub 版本库 clone help-doc 示例项目，并切换到 gh-pages 分支 #git clone https://github.com/pimgeek/help-doc\ncd help-doc\ncheckout gh-pages\n特别说明 #\n\n如果只是想把 clone 站运行起来，那么直接在 help-doc 目录下执行 jekyll s -H 0.0.0.0 即可；如果想了解每个 feature 对应的必要操作，请继续阅读。\n\n\n接下来，返回到 redo-help-doc/ 目录下操作。\n5 复制 help-doc/_src 目录下的 index.md #cd ../redo-help-doc/\njekyll s -H 0.0.0.0 &amp;\ncp ../help-doc/_src/index.md _src/\n\n后台启动 jekyll 以便继续执行前台操作，此时 jekyll 应提示\nBuild Warning: Layout &#39;default&#39; requested in index.md does not exist\n6 创建 index.md 所依赖的 default.html #mkdir _src/_layouts\ncp ../help-doc/_src/_layouts/default.html _src/_layouts/\n\n此时 jekyll 应提示\nLiquid Exception: Included file &#39;_includes/sidebar.html&#39; not found in _layouts/default.html\n7 创建 default.html 所依赖的 sidebar.html #mkdir _src/_includes\ncp ../help-doc/_src/_includes/sidebar.html _src/_includes/\n\n此时 jekyll 应提示\nLiquid Exception: Included file &#39;_includes/search.html&#39; not found in _layouts/default.html\n8 创建 siderbar.html 所依赖的 search.html #cp ../help-doc/_src/_includes/search.html _src/_includes/\nvim _src/_includes/search.html\n\n修改其中的这一行，把其中的 &quot;/help-doc/v008&quot; 改为当前 jekyll\n# _config.yml 中指定的 &quot;/redo-help-doc/v009&quot;：\n\n&lt;h3&gt;\n  &lt;!-- 下列代码中的 /help-doc/... 部分应与\n       _config.yml 中定义的 baseurl 保持一致--&gt;\n  &lt;a href=&quot;/help-doc/v008&lt;/a&gt;\n&lt;/h3&gt;\n\n此时 jekyll 无错误提示\n\n可以打开 http://192.168.1.32:4000/redo-help-doc/v009/ 查看效果\n9 创建一个示例文档 #mkdir _src/_posts\ncp ../help-doc/_src/_posts/3012-01-01-help-doc-research.md _src/_posts\n\n此时 jekyll 应提示\nBuild Warning: Layout &#39;post&#39; requested in _posts/3012-01-01-help-doc-research.md does not exist.\nLiquid Exception: Included file &#39;_includes/coll-selector.html&#39; not found in not found in _includes/sidebar.html, included in _layouts/default.html\n10 创建示例文档所依赖的 post.html 和 coll-selector.html #cp ../help-doc/_src/_layouts/post.html _src/_layouts/\ncp ../help-doc/_src/_includes/coll-selector.html _src/_includes\n\n此时 jekyll 无错误提示\n\n可以打开 http://192.168.1.32:4000/redo-help-doc/v009/ 查看效果\n11 修改 _config.yml 使之输出 categories/mindpin-docs 这样的分类索引入口网址 #vim _config.yml\n# 修改 _config.yml，在文档末尾追加以下内容\n\n# 为了让文档 URL 符合 GitHub 的 /articles/xxx.html 形式\npermalink: /articles/:title.html\n\ncollections:\n  # 为了实现分类汇总而设置 category collection\n  categories:\n    output: true\n    permalink: /categories/:path/\n  # 下面这些是为了呈现子文档列表而设置的\n  help_doc_research:\n    output: true\n    permalink: /articles/:title.html\n\n保存修改后，重新后台启动 jekyll，此时 jekyll 应提示\nLiquid Exception: Included file &#39;_includes/sub-articles.html&#39; not found in _includes/coll-selector.html, included in _layouts/post.html\n12 创建 coll-selector.html 所依赖的 sub-articles.html #cp ../help-doc/_src/_includes/sub-articles.html _src/_includes/\n\n操作完毕后，重新后台启动 jekyll，此时 jekyll 无错误提示\n\n可以打开 http://192.168.1.32:4000/redo-help-doc/v009/ 查看效果\n13 从 help-doc/_src 目录下复制一系列子文档，以便测试子文档列表的显示是否正常 #mkdir _src/_help_doc_research\ncp ../help-doc/_src/_help_doc_research/* _src/_help_doc_research/\n\n接下来等待 5 秒钟左右，然后打开以下网页超链接：\n\nhttp://192.168.1.32:4000/redo-help-doc/v009/articles/articles/help-doc-research.html\n\n在网页右侧将看到如下所示的子文档列表：\n子文档列表\n* 用 Jekyll 实现纯前端搜索\n* GitHub Help 内容架构\n* 用 Jekyll 模拟 GitHub Help\n* conref 使用效果展示\n14 创建分类索引的实际内容页 #mkdir _src/_categories\ncp ../help-doc/_src/_categories/mindpin-docs.md _src/_categories/\n\n此时 jekyll 应提示\nLiquid Exception: Included file &#39;_includes/category-links.html&#39; not found in _categories/mindpin-docs.md\n15 创建分类索引内容页所依赖的 category-links.html 和 category.html #cp ../help-doc/_src/_includes/category-links.html _src/_includes/\n\n此时 jekyll 应提示\nBuild Warning: Layout &#39;category&#39; requested in _categories/mindpin-docs.md does not exist.\ncp ../help-doc/_src/_layouts/category.html _src/_layouts/\n\n此时 jekyll 无错误提示\n\n接下来等待 5 秒钟左右，再次尝试在浏览器中打开以下网页\n\nhttp://192.168.1.32:4000/redo-help-doc/v009/categories/mindpin-docs\n\n此时应当在网页的右半部分看到如下内容\nCategory / Mindpin docs\n* Help Doc 相关调研\n  * 用 Jekyll 实现纯前端搜索\n  * GitHub Help 内容架构\n  * 用 Jekyll 模拟 GitHub Help\n  * conref 使用效果展示\n16 创建 conrefs 内容复用 feature 所依赖的 conrefs.yml #mkdir _src/_data\ncp ../help-doc/_src/_data/conrefs.yml _src/_data/\n\n此时 jekyll 无错误提示\n\n接下来等待 5 秒钟左右，尝试在浏览器中打开以下网页\n\nhttp://192.168.1.32:4000/redo-help-doc/v009/articles/conref-usage-sample.html\n\n网页载入完毕后，应当显示如下内容\n下列文字使用了 conrefs 引用：\n这段文字来自 jekyll 源码目录下的 _data 目录下的 conrefs.yml。\n……\n17 创建独立的搜索页 #mkdir _src/search\ncp ../help-doc/_src/search/index.html _src/search/\n\n此时 jekyll 应提示\nBuild Warning: Layout &#39;page&#39; requested in search/index.html does not exist.\n18 创建搜索页所依赖的 page.html，以及相关的代码文件 #cp ../help-doc/_src/_layouts/page.html _src/_layouts/\nmkdir _src/_plugins\ncp ../help-doc/_src/_plugins/jekyll_lunr_js_search.rb _src/_plugins\nmkdir _src/js\ncp ../help-doc/_src/js/jquery.lunr.search.js _src/js/\ncp ../help-doc/_src/js/lunr.min.js _src/js/\ncp ../help-doc/_src/js/search.min.js _src/js/\n18 重启 jekyll 并测试搜索页 #\n\n重启 jekyll s\n\n接下来等待 5 秒钟左右，再次尝试在网页右半部分的搜索框中\n\n搜索 facebook 关键字。回车确认后，将打开以下网页超链接：\n\nhttp://192.168.1.32:4000/redo-help-doc/v009/search?q=facebook\n\n此时浏览器应显示以下内容：\n\nSearch results\n\nhelp-doc-research\n\n\n其中，help-doc-research 是一个超链接，点击后将进入包含 facebook 关键词的文档页面。\n\n特别说明 #\n\n有两种引入 lunrjs 的方式，其一是利用 jekyll-lunr-js-search 插件，在 _config.yml 的 gems: 配置中增加，其优点是无需手动复制 js 静态文件到相关目录，只要增加模板代码即可；缺点是插件代码不一定是最新版本，而且不易调整\n\n我采用的是另一种方式，直接 clone lunrjs github 版本库，从其中的 dist 目录复制最新版代码到 redo-help-doc/_src/ 的相关目录下。而且为了适应 jekyll 的 baseurl，我还修改了 jekyll_lunr_js_search.rb 文件中的部分代码\n\n更多详情请参考这里：https://github.com/slashdotdash/jekyll-lunr-js-search\n\n另外，lunrjs 还有两个比较严重的问题尚未解决，我做过初步尝试但暂时没有调通。\n\n\nlunrjs 在对文件做索引时，对中文分词支持极差。\nlunrjs 官方插件代码只支持对 _posts 目录下的文档做索引，这导致类似 _help_doc_research 子文档目录下的文档无法被索引到。\n\n\n19 创建优化网页显示效果的静态文件 #\n\n最后，把用于提升显示效果的图片与 Sass/CSS 等静态文件复制过来\n\ncp -r ../help-doc/_src/css _src/\ncp -r ../help-doc/_src/_css _src/\ncp -r ../help-doc/_src/img _src/\n\n\n接下来等待 5 秒钟左右，然后打开以下网页超链接：\n\nhttp://192.168.1.32:4000/redo-help-doc/v009/\n\nhttp://192.168.1.32:4000/redo-help-doc/v009/articles/jekyll-frontend-search.html\n\n将会看到增加了皮肤和代码高亮效果的网页\n\n以上操作命令已经把涉及到 /article/xxx 格式的文档链接，文档分类汇总页，子文档列表页，lunrjs 纯前端搜索，conref 内容复用，GitHub Flavored Markdown 支持 等 6 项 feature 的代码文件都触及了。\n\n前置和后继文档的功能相对简单，只要在 _config.yml 文件中定义好 permalink 格式，再在模板源码中利用每篇文档的 Front Matter slug，也就是 title, prev-post 和 next-post 等字段动态创建超链接即可实现。\n\n最终形成的目录结构如下： \n\nredo-help-doc/\n├── _src\n│   ├── _categories\n│   │   └── mindpin-docs.md\n│   ├── css\n│   │   └── ...\n│   ├── _css\n│   │   └── ...\n│   ├── _data\n│   │   └── conrefs.yml\n│   ├── _help_doc_research\n│   │   └── yyyy-mm-dd-xxx-xxx-xxx.md\n│   ├── img\n│   │   └── ...\n│   ├── _includes\n│   │   ├── category-links.html\n│   │   ├── coll-selector.html\n│   │   ├── search.html\n│   │   ├── sidebar.html\n│   │   └── sub-articles.html\n│   ├── js\n│   │   ├── jquery.lunr.search.js\n│   │   ├── lunr.min.js\n│   │   └── search.min.js\n│   ├── _layouts\n│   │   ├── category.html\n│   │   ├── default.html\n│   │   ├── page.html\n│   │   └── post.html\n│   ├── _plugins\n│   │   └── jekyll_lunr_js_search.rb\n│   ├── _posts\n│   │   └── yyyy-mm-dd-xx-yyy-zzzz.md\n│   ├── search\n│   │   └── index.html\n│   └── index.md\n└── _config.yml\n\n",
                "link": "/articles/operation-manual-for-ben7th.html",
                "date": "",
                "excerpt": "",
                "seach_omit": ""
            }
            
            
        
    

    
        
    
        
            
            ,{
                "title": "jekyll-frontend-search",
                "content": "【目标】尝试把 jekyll 与 lunrjs 串接起来使用，实现纯前端全文搜索\n【GTD 结果】已走通，只是不支持中文搜索\n\n验收标准： #\n\n1 要说明每个尝试步骤的要点\n2 要说明尝试实际操作的结果如何\n3 要把已经走通的步骤中比较关键的操作细节记录下来\n\njekyll + lunrjs 操作步骤 #\n\n特别说明：我只是按下列方法调通了，但更多细节还需参考原始网站 - https://github.com/slashdotdash/jekyll-lunr-js-search\n\n01 - gem install jekyll \n\n02 - gem install jekyll-lunr-js-search\n\n03 - jekyll new lunr\n\n04 - 编辑 _config.yml ，增加下列代码\n\ngems: [&#39;jekyll-lunr-js-search&#39;]\n\n\n05 - 在 _include/ 目录下创建 search.html 模板\n\n&lt;div id=&quot;search&quot;&gt;\n  &lt;form action=&quot;{{ site.baseurl}}/search&quot; method=&quot;get&quot;&gt;\n    &lt;input type=&quot;text&quot; id=&quot;search-query&quot; name=&quot;q&quot; placeholder=&quot;Search&quot; autocomplete=&quot;off&quot;&gt;\n  &lt;/form&gt;\n&lt;/div&gt;\n&lt;section id=&quot;search-results&quot; style=&quot;display: none;&quot;&gt;\n  &lt;p&gt;Search results&lt;/p&gt;\n  &lt;div class=&quot;entries&quot;&gt;\n  &lt;/div&gt;\n&lt;/section&gt;\n{% raw%}\n&lt;script id=&quot;search-results-template&quot; type=&quot;text/mustache&quot;&gt;\n  {{#entrie}}\n    &lt;article&gt;\n      &lt;h3&gt;\n        {{#dat}}&lt;small&gt;&lt;time datetime=&quot;{{pubdat}}&quot; pubdate&gt;&lt;/time&gt;&lt;/small&gt;\n        &lt;a href=&quot;}{{ur}}&quot;&gt;{{titl}}&lt;/a&gt;\n      &lt;/h3&gt;\n    &lt;/article&gt;\n  {{/entrie}}\n&lt;/script&gt;\n{% endraw%}\n&lt;script src=&quot;{{ site.baseurl}}/js/search.min.js&quot; type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;\n&lt;script type=&quot;text/javascript&quot;&gt;\n  $(function() {\n    $(&#39;#search-query&#39;).lunrSearch({\n      indexUrl: &#39;{{ site.baseurl}}/js/index.json&#39;,   // Url for the .json file containing search index data\n      results : &#39;#search-results&#39;,  // selector for containing search results element\n      entries : &#39;.entries&#39;,         // selector for search entries containing element (contained within results above)\n      template: &#39;#search-results-template&#39;  // selector for Mustache.js template\n    });\n  });\n&lt;/script&gt;\n\n\n06 - 在需要提供搜索功能的模板中增加下列代码\n\n{% include search.html %}\n\n\n07 - 创建 search/ 目录并创建搜索页模板 index.html\n\n---\nlayout: page\ntitle: Search\n---\n\n{% include search.html %}\n\n\n08 - 在 _posts/ 目录下放置一些 markdown 文档\n例如：yyyy-mm-dd-postname.md\n\n09 - 执行 jekyll serve -H 0.0.0.0 预览效果\n例如：http://192.168.1.32/\n\n10 - 部署到 github pages（project 类站点）前的准备\n修改 _config.yml\n\nbaseurl: &quot;/help-doc/v001&quot;\n注释掉 url: 这一行\n然后修改以下模板文件 _include/search.html 中的相关路径\n特别是 {{ur}}这一行要改为\n\n&lt;a href=&quot;/help-doc/v001{{ur}}&quot;&gt;{{titl}}&lt;/a&gt;\n\n\n再次执行 jekyll serve -H 0.0.0.0 预览效果\n例如：http://192.168.1.32/help-doc/v001/\n\n11 创建一个新的版本库 https://github.com/username/help-doc\n然后先 clone 到本地，再创建并切换到 gh-pages 分支，再\n在其中创建 v001 目录。\n\n12 把 _site 中的静态文件完全复制到 help-doc 源码库的 v001 目录下\n执行 git add / commit / push origin gh-pages 等命令\n稍等片刻，就可以用 yourname.github.io/help-doc/v001 访问之。\n例如：http://pimgeek.github.io/help-doc/v001/\n简单试用过后，发现 lunrjs 无力对中文内容做索引\n\n有个号称支持中文分词的 luna.js 我曾试着替换 jekyll 项目中的 js 文件，但没有调通。具体步骤略。\n\n参考资料 #\n\nJekyll 的 lunajs 搜索插件 - https://github.com/slashdotdash/jekyll-lunr-js-search\n一个使用 lunrjs 的典型博客 - https://github.com/rohit01/rohit01.github.io\n一个号称支持中文分词的 lunr.js  - https://github.com/nandy007/lunr.js\n",
                "link": "/articles/jekyll-frontend-search.html",
                "date": "",
                "excerpt": "",
                "seach_omit": ""
            }
            
            
        
            
            ,{
                "title": "github-help-doc-framework",
                "content": "【目标】我要抽取出 help.github.com 的站点结构\n【GTD 结果】已走通\n\n执行参考 #\n\n@ben7th 的建议：可以在熟悉 help.github.com 站点结构的过程中把它的一些和内容浏览，导航相关的特性，如文章分类，搜索，内部链接外部链接，贴图贴代码（这是我打比方的，实际上有哪些特性按他的为准），各自是如何实现的，和开源工具中的一些用法对应起来，并在记录操作步骤的时候列出。\n\n验收标准 #\n\n1 主要的页面类型都点过，留有印象\n2 主要的页面互动模块和内容模块都看过，留有印象\n3 各种模块与开源工具的对应关系要给出\n4 配置开源工具的过程中，一些容易踩坑的操作细节要列出\n\n1 主要页面包括\n - 主站首页(/)，各个子产品的各版本首页(/sub-prod-name/ver/)，文章页(/articles/*)，分类页(/categories/*)，搜索页(/search/)\n\n2 各主要页面的主要模块\n - 首页以及子产品各版本首页模块列举\n   - 置顶文章模块(4个图片链接)\n   - 搜索框模块(search)\n   - 常见问题模块(common issues)\n   - 分类文章列表模块(categories)\n\n\n文章页模块列举\n\n\n搜索框模块(search)\n文章主体模块，其中含若干子模块\n\n\n不同操作系统的标签页模块(articleplatformnav)，参见 Set Up Git\n可折叠的帮助信息模块(helper)，参见 Set Up Git\n\n文章侧边栏模块\n\n\n同一文章的在其它子产品和版本下的链接\n\n\n分类页模块列举\n\n\n搜索框模块(search)\n文章列表模块(articles)\n\n\n",
                "link": "/articles/github-help-doc-framework.html",
                "date": "",
                "excerpt": "",
                "seach_omit": ""
            }
            
            
        
            
            ,{
                "title": "github-help-doc-clone-with-jekyll",
                "content": "jekyll + lunrjs 的调通方法已经在 #2 中描述过，所以这里只讲实现 github help 站点文档结构的步骤。\n\njekyll 环境说明 #\n\n\n若无特别说明，所有形如 YYYY-MM-DD-article-title.md 文档的 Front Matter 中均含有 title: Article Title，而且 Front Matter 中的 title 与 *.md 文件名中的 title 严格对应（不区分大小写），*.md 中的 - 严格替换为 。\n我使用的 jekyll 文件夹名为 help-doc\n我使用的 jekyll 模板结构大概如下图所示\n\n\nhelp-doc/\n├── _categories\n│   ├── bootcamp.md\n│   └── setting-up-and-managing-organizations-and-teams.md\n├── _creating_a_new_organization_account\n│   ├── 2015-02-08-creating-a-new-organization-from-scratch.md\n│   └── 2015-02-09-about-organizations.md\n├── css\n│   └── ...\n├── _data\n│   └── conrefs.yml\n├── fonts\n│   └── ...\n├── _includes\n│   ├── category-articles.html\n│   ├── footer.html\n│   ├── header.html\n│   ├── head.html\n│   ├── search.html\n│   ├── sidebar.html\n│   └── sub-articles.html\n├── _layouts\n│   ├── category.html\n│   ├── default.html\n│   ├── page.html\n│   └── post.html\n├── _posts\n│   ├── 2015-02-10-creating-a-new-organization-account.md\n│   ├── 2015-01-01-set-up-git.md\n│   └── 2015-01-02-create-a-repo.md\n├── _sass\n│   └── ...\n├── search\n│   └── index.html\n├── about.md\n├── _config.yml\n├── feed.xml\n└── index.html\n利用 jekyll 构建 github help 站点文档结构的步骤描述 #\n\n帮助文档的 markdown 源码要放在哪里，才能通过 Jekyll 输出到前端？\n先编写文档内容，然后按照 YYYY-MM-DD-help-topic.md 的文件格式命名，最后根据实际情况放进以下两个位置：\n\n\n对于独立的帮助文档，直接放在 _posts 目录下\n对于“隶属于”某个独立父帮助文档的“子文档”，根据子文档的实际分类，放在形如 _category_name 这样的目录下\n\n\n\n\n\n\n如何让 Jekyll 输出类似 https://help.github.com/articles/set-up-git/ 这样的网址？\n编辑 _config.yml 文档，增加/修改这一行：\npermalink: /articles/:title/\n\n\n\n\n\n如何让 Jekyll 输出类似 https://help.github.com/categories/bootcamp/ 这样的分类索引页？\n分多个步骤实现：\n\n\n在已有的，属于 bootcamp 这一类的帮助文档的 markdown 源码 Front Matter 中增加这段内容：\ncategories: [&#39;bootcamp&#39;]\n至少要有一篇属于 bootcamp 分类的帮助文档，才能在首页上列出相关的分类。分类名称支持大写字母、小写字母、空格等，但真正存储到 Jekyll 模板系统的内存中时，貌似都会变为小写。\n编辑 _config.yml 文档，在其中增加这段定义 collection 的内容：\n\n\n  collections:\n    categories:\n      output: true\n      permalink: /categories/:path/\n\n\n如果不定义这个，仅仅能在首页看到分类索引页的链接，但无法打开目标网页。\n\n\n在 _categories 目录下创建一个名为 bootcamp.md 的文件（文件名采用大写字母还是小写会造成不同效果，要注意），其内容如下：\n\n\n---\nlayout: category\n---\n\n{% assign cat-title-array=page.url | split:&#39;/&#39;%}\n{% assign cat-title=cat-title-array[2] | replace:&#39;-&#39;,&#39; &#39;%}\n{% assign cat-obj=site.categories[cat-title]%}\n{% include category-articles.html which-cat=cat-obj%}   \n\n\n如果不定义这个，或者文件名与分类名不一致，仍然会出现导航中有分类索引页的链接，但实际点不开的情况。如果想定义别的分类，比如 manage-organization 分类，仍然按这个步骤来做，文件内容不变，只有文件名需要改为 manage-organization.md \n  - 在 _layouts 目录下创建一个名为 category.html 的网页布局文件，其内容如下：\n\n---\nlayout: default\n---\n\n{% assign page-title-array=page.url | split:&#39;/&#39;%}\n{% assign page-title=page-title-array[2] | replace:&#39;-&#39;,&#39; &#39; | capitalize%}\n\n&lt;h1&gt;Category / {{ page-title}}&lt;/h1&gt;\n\n{{ content}}\n\n\n单个分类索引网页需要引用这个网页布局文件。\n  - 在 _include 目录下创建一个名为 category-articles.html 的包含文件，其内容如下：\n\n&lt;ul&gt;\n  {% for post in include.which-cat%}\n    &lt;li&gt;\n      &lt;a class=&#39;post-link&#39; href=&#39;{{ post.url | prepend: site.baseurl | prepend: site.url}}&#39;&gt;{{ post.title}}&lt;/a&gt;\n    &lt;/li&gt;\n  {% endfor%}\n&lt;/ul&gt;\n\n\n单个分类索引网页需要引用这个网页包含文件。\n  关于 {% include tmpl.html var-name=sth%} 和 {{ include.var-name}} 这种特殊语法的介绍，请参考 http://jekyllrb.com/docs/templates/ 中的 ProTip：Use variables as file name\n\n\n\n\n如何利用 Jekyll 输出类似于 https://help.github.com/articles/creating-a-new-organization-account/ 这样的 “子文档列表”？\n首先要在 _posts 目录下创建一个独立的父帮助文档：2015-02-10-creating-a-new-organization-account.md，然后进行下列操作步骤：\n\n\n修改 _config.yml 文件内容，增加一个对应的 collection：\n\n\n\ncollections:\n  categories:\n    output: true\n    permalink: /categories/:path/\n  creating_a_new_organization_account:  # 这里是新增加的 collection，单词之间必须用 `_` 分隔\n    output: true\n    permalink: /articles/:title/  # 子文档的超链接，以 /articles/xxx-xxx-xxx/ 的方式输出\n\n\n\n在独立帮助文档 2015-02-10-creating-a-new-organization-account.md 的 markdown 源码末尾处增加一段获取子文档列表的代码：\n\n\n---\nlayout: post\ncategories: [&#39;Setting up and managing organizations and teams&#39;]\n---\n\nYou can create a new organization by either setting up a new organization or converting an existing personal account into an organization.\n\n{% assign coll-title-array=page.url | split:&#39;/&#39;%}\n{% assign coll-title=coll-title-array[2] | replace:&#39;-&#39;,&#39;_&#39; | downcase%}\n{% assign coll-obj = site.collections[coll-title].docs%}\n{% include sub-articles.html which-coll=coll-obj%}\n\n\n\n在 jekyll 的根目录下创建一个新的 collection 目录： _creating_a_new_organization_account ，这里单词之间必须用 _ 分隔。\n在新创建的 collection 目录下增加一系列子文档，均以 markdown 文档方式给出。\n\n\nhelp-doc/\n├── _creating_a_new_organization_account\n│   ├── 2015-02-08-creating-a-new-organization-from-scratch.md\n│   └── 2015-02-09-about-organizations.md\n\n\n\n在分类索引页的包含文件 _include/category-articles.html 中增加下列内容\n\n\n&lt;ul&gt;\n  {% for post in include.which-cat%}\n    &lt;li&gt;\n      &lt;a class=&#39;post-link&#39; href=&#39;{{ post.url | prepend: site.baseurl | prepend: site.url}}&#39;&gt;{{ post.title}}&lt;/a&gt;\n        &lt;!-- 如果当前文章有下属的子文章，就顺便列出它们 --&gt;\n        {% assign post-id = post.title | replace:&#39; &#39;,&#39;_&#39; | downcase%}\n        {% if site.collections[post-id].label == post-id%}\n          {% assign coll-obj = site.collections[post-id].docs%}\n          {% include sub-articles.html which-coll=coll-obj%}\n        {% endif%}\n       &lt;!-- 子文档列表功能 增加的代码部分结束 --&gt;\n    &lt;/li&gt;\n  {% endfor%}\n&lt;/ul&gt;\n\n\n\n在 _include 目录下增加一个名为 sub-articles.html 的包含文件，其内容如下\n\n\n&lt;ul&gt;\n  {% for post in include.which-coll%}\n    &lt;li&gt;&lt;a class=&#39;post-link&#39; href=&#39;{{ post.url | prepend: site.baseurl | prepend: site.url}}&#39;&gt;{{ post.title}}&lt;/a&gt;&lt;/li&gt;\n  {% endfor%}\n&lt;/ul&gt;\n\n\n分类索引文件和独立的父文档文件都需要引用这个包含文件。\n\n\n\n\n如何实现 github help 文档中的 conrefs 内容复用？\n\n\n首先在 jekyll 的源码目录下创建一个 _data 目录\n在 _data 目录下创建 conrefs.yml 文件，其内容根据实际需要而定\n\n\n\nrepositories:\n  create-new:\n    1. In the upper-right corner of any page, click {{ octicon-plus}}, and then click **New repository**.\n      ![New repository menu](https://help.github.com/assets/images/help/repository/repo-create.png)\n\nwiki:\n  click-profile:\n    1. ![Profile photo](/assets/images/help/profile/top_right_avatar.png)In the top right corner of any page, click your profile photo, then click **Your profile**.           \n\n\n这些就是未来将会被复用的内容片段，只要修改 conrefs.yml 文件，并且用 jekyll 重新 build 全站文档，就可以做到一处修改多处生效。\n  - 在实际的帮助文档的 markdown 源码中引用这些片段：\n\n### Create a new repository on GitHub                                                                 \n1. In the upper-right corner of any page, click {{ octicon-plus&quot; }}, and then click **New repository**. ![New repository menu](https://help.github.com/assets/images/help/repository/repo-create.png)\n2. \n![Repository name field](/assets/images/help/repository/create-repository-name.png)Create a short, memorable name for your repository. For example, &quot;hello-world&quot;.                                                     \n\n\n将会被替换为下图所示的样子\n\n",
                "link": "/articles/github-help-doc-clone-with-jekyll.html",
                "date": "",
                "excerpt": "",
                "seach_omit": ""
            }
            
            
        
            
            ,{
                "title": "conref-usage-sample",
                "content": "下列文字使用了 conrefs 引用：\n\n这段文字来自 jekyll 源码目录下的 _data 目录下的 conrefs.yml。\n\n在 conrefs.yml 文件中，可以用 YAML 语法定义一系列可重复引用的文本段落，比如：\n\nhelp-doc:\n  sample-conref: |\n    A quick brown fox jumps over the lazy dog.\n\n\n并且用 Liquid 模板语法引用这段文本，比如：{{ site.data.conrefs.help-doc.sample-conref }}\n",
                "link": "/articles/conref-usage-sample.html",
                "date": "",
                "excerpt": "",
                "seach_omit": ""
            }
            
            
        
    

    
        
    
        
            
            ,{
                "title": "jsx-in-depth",
                "content": "JSX is a JavaScript syntax extension that looks similar to XML. You can use a simple JSX syntactic transform with React.\n\nWhy JSX? #\n\nYou don&#39;t have to use JSX with React. You can just use plain JS. However, we recommend using JSX because it is a concise and familiar syntax for defining tree structures with attributes.\n\nIt&#39;s more familiar for casual developers such as designers.\n\nXML has the benefit of balanced opening and closing tags. This helps make large trees easier to read than function calls or object literals.\n\nIt doesn&#39;t alter the semantics of JavaScript.\n\nHTML Tags vs. React Components #\n\nReact can either render HTML tags (strings) or React components (classes).\n\nTo render a HTML tag, just use lower-case tag names in JSX:\n\nvar myDivElement = &lt;div className=&quot;foo&quot; /&gt;;\nReact.render(myDivElement, document.getElementById(&#39;example&#39;));\n\n\nTo render a React Component, just create a local variable that starts with an upper-case letter:\n\nvar MyComponent = React.createClass({/*...*/});\nvar myElement = &lt;MyComponent someProperty={true} /&gt;;\nReact.render(myElement, document.getElementById(&#39;example&#39;));\n\n\nReact&#39;s JSX uses the upper vs. lower case convention to distinguish between local component classes and HTML tags.\n\n\nNote:\n\nSince JSX is JavaScript, identifiers such as class and for are discouraged\nas XML attribute names. Instead, React DOM components expect DOM property\nnames like className and htmlFor, respectively.\n\n\nThe Transform #\n\nReact JSX transforms from an XML-like syntax into native JavaScript. XML elements, attributes and children are transformed into arguments that are passed to React.createElement.\n\nvar Nav;\n// Input (JSX):\nvar app = &lt;Nav color=&quot;blue&quot; /&gt;;\n// Output (JS):\nvar app = React.createElement(Nav, {color:&quot;blue&quot;});\n\n\nNotice that in order to use &lt;Nav /&gt;, the Nav variable must be in scope.\n\nJSX also allows specifying children using XML syntax:\n\nvar Nav, Profile;\n// Input (JSX):\nvar app = &lt;Nav color=&quot;blue&quot;&gt;&lt;Profile&gt;click&lt;/Profile&gt;&lt;/Nav&gt;;\n// Output (JS):\nvar app = React.createElement(\n  Nav,\n  {color:&quot;blue&quot;},\n  React.createElement(Profile, null, &quot;click&quot;)\n);\n\n\nJSX will infer the class&#39;s displayName from the variable assignment when the displayName is undefined:\n\n// Input (JSX):\nvar Nav = React.createClass({ });\n// Output (JS):\nvar Nav = React.createClass({displayName: &quot;Nav&quot;, });\n\n\nUse the JSX Compiler to try out JSX and see how it\ndesugars into native JavaScript, and the\nHTML to JSX converter to convert your existing HTML to\nJSX.\n\nIf you want to use JSX, the Getting Started guide shows how to setup compilation.\n\n\nNote:\n\nThe JSX expression always evaluates to a ReactElement. The actual\nimplementation details may vary. An optimized mode could inline the\nReactElement as an object literal to bypass the validation code in\nReact.createElement.\n\n\nNamespaced Components #\n\nIf you are building a component that has many children, like a form, you might end up with something with a lot of variable declarations:\n\n// Awkward block of variable declarations\nvar Form = MyFormComponent;\nvar FormRow = Form.Row;\nvar FormLabel = Form.Label;\nvar FormInput = Form.Input;\n\nvar App = (\n  &lt;Form&gt;\n    &lt;FormRow&gt;\n      &lt;FormLabel /&gt;\n      &lt;FormInput /&gt;\n    &lt;/FormRow&gt;\n  &lt;/Form&gt;\n);\n\n\nTo make it simpler and easier, namespaced components let you use one component that has other components as attributes:\n\nvar Form = MyFormComponent;\n\nvar App = (\n  &lt;Form&gt;\n    &lt;Form.Row&gt;\n      &lt;Form.Label /&gt;\n      &lt;Form.Input /&gt;\n    &lt;/Form.Row&gt;\n  &lt;/Form&gt;\n);\n\n\nTo do this, you just need to create your &quot;sub-components&quot; as attributes of the main component:\n\nvar MyFormComponent = React.createClass({ ... });\n\nMyFormComponent.Row = React.createClass({ ... });\nMyFormComponent.Label = React.createClass({ ... });\nMyFormComponent.Input = React.createClass({ ... });\n\n\nJSX will handle this properly when compiling your code.\n\nvar App = (\n  React.createElement(Form, null,\n    React.createElement(Form.Row, null,\n      React.createElement(Form.Label, null),\n      React.createElement(Form.Input, null)\n    )\n  )\n);\n\n\n\nNote:\n\nThis feature is available in v0.11 and above.\n\n\nJavaScript Expressions #Attribute Expressions #\nTo use a JavaScript expression as an attribute value, wrap the expression in a\npair of curly braces ({}) instead of quotes (&quot;&quot;).\n// Input (JSX):\nvar person = &lt;Person name={window.isLoggedIn ? window.name : &#39;&#39;} /&gt;;\n// Output (JS):\nvar person = React.createElement(\n  Person,\n  {name: window.isLoggedIn ? window.name : &#39;&#39;}\n);\nBoolean Attributes #\nOmitting the value of an attribute causes JSX to treat it as true. To pass false an attribute expression must be used. This often comes up when using HTML form elements, with attributes like disabled, required, checked and readOnly.\n// These two are equivalent in JSX for disabling a button\n&lt;input type=&quot;button&quot; disabled /&gt;;\n&lt;input type=&quot;button&quot; disabled={true} /&gt;;\n\n// And these two are equivalent in JSX for not disabling a button\n&lt;input type=&quot;button&quot; /&gt;;\n&lt;input type=&quot;button&quot; disabled={false} /&gt;;\nChild Expressions #\nLikewise, JavaScript expressions may be used to express children:\n// Input (JSX):\nvar content = &lt;Container&gt;{window.isLoggedIn ? &lt;Nav /&gt; : &lt;Login /&gt;}&lt;/Container&gt;;\n// Output (JS):\nvar content = React.createElement(\n  Container,\n  null,\n  window.isLoggedIn ? React.createElement(Nav) : React.createElement(Login)\n);\nComments #\nIt&#39;s easy to add comments within your JSX; they&#39;re just JS expressions. You just need to be careful to put {} around the comments when you are within the children section of a tag.\nvar content = (\n  &lt;Nav&gt;\n    {/* child comment, put {} around /}\n    &lt;Person\n      / multi\n         line\n         comment */\n      name={window.isLoggedIn ? window.name : &#39;&#39;} // end of line comment\n    /&gt;\n  &lt;/Nav&gt;\n);\n\n\nNOTE:\n\nJSX is similar to HTML, but not exactly the same. See JSX gotchas for some key differences.\n\n\n",
                "link": "/articles/jsx-in-depth.html",
                "date": "",
                "excerpt": "",
                "seach_omit": ""
            }
            
            
        
            
            ,{
                "title": "jsx-spread",
                "content": "If you know all the properties that you want to place on a component ahead of time, it is easy to use JSX:\n\n  var component = &lt;Component foo={x} bar={y} /&gt;;\nMutating Props is Bad, mkay #\nIf you don&#39;t know which properties you want to set, you might be tempted to add them onto the object later:\n  var component = &lt;Component /&gt;;\n  component.props.foo = x; // bad\n  component.props.bar = y; // also bad\n\n\nThis is an anti-pattern because it means that we can&#39;t help you check the right propTypes until way later. This means that your propTypes errors end up with a cryptic stack trace.\n\nThe props should be considered immutable. Mutating the props object somewhere else could cause unexpected consequences so ideally it would be a frozen object at this point.\n\nSpread Attributes #\n\nNow you can use a new feature of JSX called spread attributes:\n\n  var props = {};\n  props.foo = x;\n  props.bar = y;\n  var component = &lt;Component {...props} /&gt;;\n\n\nThe properties of the object that you pass in are copied onto the component&#39;s props.\n\nYou can use this multiple times or combine it with other attributes. The specification order is important. Later attributes override previous ones.\n\n  var props = { foo: &#39;default&#39; };\n  var component = &lt;Component {...props} foo={&#39;override&#39;} /&gt;;\n  console.log(component.props.foo); // &#39;override&#39;\nWhat&#39;s with the weird ... notation? #\nThe ... operator (or spread operator) is already supported for arrays in ES6. There is also an ES7 proposal for Object Rest and Spread Properties. We&#39;re taking advantage of these supported and developing standards in order to provide a cleaner syntax in JSX.\n",
                "link": "/articles/jsx-spread.html",
                "date": "",
                "excerpt": "",
                "seach_omit": ""
            }
            
            
        
            
            ,{
                "title": "jsx-gotchas",
                "content": "JSX looks like HTML but there are some important differences you may run into.\n\n\nNote:\n\nFor DOM differences, such as the inline style attribute, check here.\n\n\nHTML Entities #\n\nYou can insert HTML entities within literal text in JSX:\n\n&lt;div&gt;First &amp;middot; Second&lt;/div&gt;\n\n\nIf you want to display an HTML entity within dynamic content, you will run into double escaping issues as React escapes all the strings you are displaying in order to prevent a wide range of XSS attacks by default.\n\n// Bad: It displays &quot;First &amp;middot; Second&quot;\n&lt;div&gt;{&#39;First &amp;middot; Second&#39;}&lt;/div&gt;\n\n\nThere are various ways to work-around this issue. The easiest one is to write unicode character directly in JavaScript. You need to make sure that the file is saved as UTF-8 and that the proper UTF-8 directives are set so the browser will display it correctly.\n\n&lt;div&gt;{&#39;First · Second&#39;}&lt;/div&gt;\n\n\nA safer alternative is to find the unicode number corresponding to the entity and use it inside of a JavaScript string.\n\n&lt;div&gt;{&#39;First \\u00b7 Second&#39;}&lt;/div&gt;\n&lt;div&gt;{&#39;First &#39; + String.fromCharCode(183) + &#39; Second&#39;}&lt;/div&gt;\n\n\nYou can use mixed arrays with strings and JSX elements.\n\n&lt;div&gt;{[&#39;First &#39;, &lt;span&gt;&amp;middot;&lt;/span&gt;, &#39; Second&#39;]}&lt;/div&gt;\n\n\nAs a last resort, you always have the ability to insert raw HTML.\n\n&lt;div dangerouslySetInnerHTML={{__html: &#39;First &amp;middot; Second&#39;}} /&gt;\nCustom HTML Attributes #\nIf you pass properties to native HTML elements that do not exist in the HTML specification, React will not render them. If you want to use a custom attribute, you should prefix it with data-.\n&lt;div data-custom-attribute=&quot;foo&quot; /&gt;\n\n\nWeb Accessibility attributes starting with aria- will be rendered properly.\n\n&lt;div aria-hidden={true} /&gt;\n\n",
                "link": "/articles/jsx-gotchas.html",
                "date": "",
                "excerpt": "",
                "seach_omit": ""
            }
            
            
        
    

    
        
    
        
            
            ,{
                "title": "more-about-refs",
                "content": "After returning the structure of your UI from the render method, you may find yourself wanting to &quot;reach out&quot; and invoke methods on component instances returned from render. Often, doing something like this isn&#39;t necessary for making data flow through your application, because the Reactive data flow always ensures that the most recent props are sent to each child that is output from render(). However, there are a few cases where it still might be necessary or beneficial.\n\nConsider the case, when you wish to tell an &lt;input /&gt; element (that exists within your instances sub-hierarchy) to focus after you update its value to be the empty string, &#39;&#39;.\n\n  var App = React.createClass({\n    getInitialState: function() {\n      return {userInput: &#39;&#39;};\n    },\n    handleChange: function(e) {\n      this.setState({userInput: e.target.value});\n    },\n    clearAndFocusInput: function() {\n      this.setState({userInput: &#39;&#39;}); // Clear the input\n      // We wish to focus the &lt;input /&gt; now!\n    },\n    render: function() {\n      return (\n        &lt;div&gt;\n          &lt;div onClick={this.clearAndFocusInput}&gt;\n            Click to Focus and Reset\n          &lt;/div&gt;\n          &lt;input\n            value={this.state.userInput}\n            onChange={this.handleChange}\n          /&gt;\n        &lt;/div&gt;\n      );\n    }\n  });\n\n\nNotice how, in this example, we want to &quot;tell&quot; the input something - something that it cannot infer from its props over time. In this case we want to &quot;tell&quot; it that it should now become focused. However, there are some challenges. What is returned from render() is not your actual composition of &quot;child&quot; components, but rather it is a description of the children at a particular instance in time - a snapshot.\n\n\nNote:\n\nRemember, what you return from render() is not your actual rendered children instances. What you return from render() is merely a description of the children instances in your component&#39;s sub-hierarchy at a particular moment in time.\n\n\nThis means that you should never &quot;hold onto&quot; something that you return from render() and then expect it to be anything meaningful.\n\n  // counterexample: DO NOT DO THIS!\n  render: function() {\n    var myInput = &lt;input /&gt;;          // I&#39;m going to try to call methods on this\n    this.rememberThisInput = myInput; // input at some point in the future! YAY!\n    return (\n      &lt;div&gt;\n        &lt;div&gt;...&lt;/div&gt;\n        {myInput}\n      &lt;/div&gt;\n    );\n  }\n\n\nIn this counterexample, the &lt;input /&gt; is merely a description of an &lt;input /&gt;. This description is used to create a real backing instance for the &lt;input /&gt;.\n\nSo how do we talk to the real backing instance of the input?\n\nThe ref String Attribute #\n\nReact supports a very special property that you can attach to any component that is output from render(). This special property allows you to refer to the corresponding backing instance of anything returned from render(). It is always guaranteed to be the proper instance, at any point in time.\n\nIt&#39;s as simple as:\n\n\nAssign a ref attribute to anything returned from render such as:\n\n\n  &lt;input ref=&quot;myInput&quot; /&gt;\n\n\n\nIn some other code (typically event handler code), access the backing instance via this.refs as in:\n\n\n  this.refs.myInput\n\n\nYou can access the component&#39;s DOM node directly by calling React.findDOMNode(this.refs.myInput).\n\nThe ref Callback Attribute #\n\nThe ref attribute can be a callback function instead of a name.  This callback will be executed immediately after the component is mounted.  The referenced component will be passed in as a parameter, and the callback function may use the component immediately, or save the reference for future use (or both).\n\nIt&#39;s as simple as assigning a ref attribute to anything returned from render such as:\n\n  &lt;input ref={ function(component){ React.findDOMNode(component).focus();} } /&gt;\nCompleting the Example #  var App = React.createClass({\n    getInitialState: function() {\n      return {userInput: &#39;&#39;};\n    },\n    handleChange: function(e) {\n      this.setState({userInput: e.target.value});\n    },\n    clearAndFocusInput: function() {\n      // Clear the input\n      this.setState({userInput: &#39;&#39;}, function() {\n        // This code executes after the component is re-rendered\n        React.findDOMNode(this.refs.theInput).focus();   // Boom! Focused!\n      });\n    },\n    render: function() {\n      return (\n        &lt;div&gt;\n          &lt;div onClick={this.clearAndFocusInput}&gt;\n            Click to Focus and Reset\n          &lt;/div&gt;\n          &lt;input\n            ref=&quot;theInput&quot;\n            value={this.state.userInput}\n            onChange={this.handleChange}\n          /&gt;\n        &lt;/div&gt;\n      );\n    }\n  });\n\n\nIn this example, our render function returns a description of an &lt;input /&gt; instance. But the true instance is accessed via this.refs.theInput. As long as a child component with ref=&quot;theInput&quot; is returned from render, this.refs.theInput will access the proper instance. This even works on higher level (non-DOM) components such as &lt;Typeahead ref=&quot;myTypeahead&quot; /&gt;.\n\nSummary #\n\nRefs are a great way to send a message to a particular child instance in a way that would be inconvenient to do via streaming Reactive props and state. They should, however, not be your go-to abstraction for flowing data through your application. By default, use the Reactive data flow and save refs for use cases that are inherently non-reactive.\n\nBenefits: #\n\n\nYou can define any public method on your component classes (such as a reset method on a Typeahead) and call those public methods through refs (such as this.refs.myTypeahead.reset()).\nPerforming DOM measurements almost always requires reaching out to a &quot;native&quot; component such as &lt;input /&gt; and accessing its underlying DOM node via React.findDOMNode(this.refs.myInput). Refs are one of the only practical ways of doing this reliably.\nRefs are automatically managed for you! If that child is destroyed, its ref is also destroyed for you. No worrying about memory here (unless you do something crazy to retain a reference yourself).\n\n\nCautions: #\n\n\nNever access refs inside of any component&#39;s render method - or while any component&#39;s render method is even running anywhere in the call stack.\nIf you want to preserve Google Closure Compiler Crushing resilience, make sure to never access as a property what was specified as a string. This means you must access using this.refs[&#39;myRefString&#39;] if your ref was defined as ref=&quot;myRefString&quot;.\nIf you have not programmed several apps with React, your first inclination is usually going to be to try to use refs to &quot;make things happen&quot; in your app. If this is the case, take a moment and think more critically about where state should be owned in the component hierarchy. Often, it becomes clear that the proper place to &quot;own&quot; that state is at a higher level in the hierarchy. Placing the state there often eliminates any desire to use refs to &quot;make things happen&quot; – instead, the data flow will usually accomplish your goal.\n\n",
                "link": "/articles/more-about-refs.html",
                "date": "",
                "excerpt": "",
                "seach_omit": ""
            }
            
            
        
    

    
        
    
        
            
            ,{
                "title": "animation",
                "content": "React provides a ReactTransitionGroup addon component as a low-level API for animation, and a ReactCSSTransitionGroup for easily implementing basic CSS animations and transitions.\n\nHigh-level API: ReactCSSTransitionGroup #\n\nReactCSSTransitionGroup is based on ReactTransitionGroup and is an easy way to perform CSS transitions and animations when a React component enters or leaves the DOM. It&#39;s inspired by the excellent ng-animate library.\n\nGetting Started #\n\nReactCSSTransitionGroup is the interface to ReactTransitions. This is a simple element that wraps all of the components you are interested in animating. Here&#39;s an example where we fade list items in and out.\n\nvar ReactCSSTransitionGroup = React.addons.CSSTransitionGroup;\n\nvar TodoList = React.createClass({\ngetInitialState: function() {\nreturn {items: [&#39;hello&#39;, &#39;world&#39;, &#39;click&#39;, &#39;me&#39;]};\n},\nhandleAdd: function() {\nvar newItems =\n  this.state.items.concat([prompt(&#39;Enter some text&#39;)]);\nthis.setState({items: newItems});\n},\nhandleRemove: function(i) {\nvar newItems = this.state.items;\nnewItems.splice(i, 1);\nthis.setState({items: newItems});\n},\nrender: function() {\nvar items = this.state.items.map(function(item, i) {\n  return (\n    &lt;div key={item} onClick={this.handleRemove.bind(this, i)}&gt;\n      {item}\n    &lt;/div&gt;\n  );\n}.bind(this));\nreturn (\n  &lt;div&gt;\n    &lt;button onClick={this.handleAdd}&gt;Add Item&lt;/button&gt;\n    &lt;ReactCSSTransitionGroup transitionName=&quot;example&quot;&gt;\n      {items}\n    &lt;/ReactCSSTransitionGroup&gt;\n  &lt;/div&gt;\n);\n}\n});\n\n\n\nNote:\n\nYou must provide the key attribute for all children of ReactCSSTransitionGroup, even if rendering a single item. This is how React will determine which children have entered, left, or stayed.\n\n\nIn this component, when a new item is added to ReactCSSTransitionGroup it will get the example-enter CSS class and the example-enter-active CSS class added in the next tick. This is a convention based on the transitionName prop.\n\nYou can use these classes to trigger a CSS animation or transition. For example, try adding this CSS and adding a new list item:\n\n.example-enter {\nopacity: 0.01;\ntransition: opacity .5s ease-in;\n}\n\n.example-enter.example-enter-active {\nopacity: 1;\n}\n\n\nYou&#39;ll notice that when you try to remove an item ReactCSSTransitionGroup keeps it in the DOM. If you&#39;re using an unminified build of React with add-ons you&#39;ll see a warning that React was expecting an animation or transition to occur. That&#39;s because ReactCSSTransitionGroup keeps your DOM elements on the page until the animation completes. Try adding this CSS:\n\n.example-leave {\nopacity: 1;\ntransition: opacity .5s ease-in;\n}\n\n.example-leave.example-leave-active {\nopacity: 0.01;\n}\nAnimate Initial Mounting #\nReactCSSTransitionGroup provides the optional prop transitionAppear, to add an extra transition phase at the initial mount of the component. There is generally no transition phase at the initial mount as the default value of transitionAppear is false. Following an example which passes the prop transitionAppear with the value true.\nrender: function() {\nreturn (\n  &lt;ReactCSSTransitionGroup transitionName=&quot;example&quot; transitionAppear={true}&gt;\n    &lt;h1&gt;Fading at Initial Mount&lt;/h1&gt;\n  &lt;/ReactCSSTransitionGroup&gt;\n);\n}\n\n\nDuring the initial mount ReactCSSTransitionGroup will get the example-appear CSS class and the example-appear-active CSS class added in the next tick.\n\n.example-appear {\nopacity: 0.01;\ntransition: opacity .5s ease-in;\n}\n\n.example-appear.example-appear-active {\nopacity: 1;\n}\n\n\nAt the initial mount, all children of the ReactCSSTransitionGroup will appear but not enter. However, all children later added to an existing ReactCSSTransitionGroup will enter but not appear.\n\n\nNote:\n\nThe prop transitionAppear was added to ReactCSSTransitionGroup in version 0.13. To maintain backwards compatibility, the default value is set to false.\n\n\nAnimation Group Must Be Mounted To Work #\n\nIn order for it to apply transitions to its children, the ReactCSSTransitionGroup must already be mounted in the DOM or the prop transitionAppear must be set to true. The example below would not work, because the ReactCSSTransitionGroup is being mounted along with the new item, instead of the new item being mounted within it. Compare this to the Getting Started section above to see the difference.\n\nrender: function() {\nvar items = this.state.items.map(function(item, i) {\n  return (\n    &lt;div key={item} onClick={this.handleRemove.bind(this, i)}&gt;\n      &lt;ReactCSSTransitionGroup transitionName=&quot;example&quot;&gt;\n        {item}\n      &lt;/ReactCSSTransitionGroup&gt;\n    &lt;/div&gt;\n  );\n}, this);\nreturn (\n  &lt;div&gt;\n    &lt;button onClick={this.handleAdd}&gt;Add Item&lt;/button&gt;\n    {items}\n  &lt;/div&gt;\n);\n}\nAnimating One or Zero Items #\nIn the example above, we rendered a list of items into ReactCSSTransitionGroup. However, the children of ReactCSSTransitionGroup can also be one or zero items. This makes it possible to animate a single element entering or leaving. Similarly, you can animate a new element replacing the current element. For example, we can implement a simple image carousel like this:\nvar ReactCSSTransitionGroup = React.addons.CSSTransitionGroup;\n\nvar ImageCarousel = React.createClass({\npropTypes: {\nimageSrc: React.PropTypes.string.isRequired\n},\nrender: function() {\nreturn (\n  &lt;div&gt;\n    &lt;ReactCSSTransitionGroup transitionName=&quot;carousel&quot;&gt;\n      &lt;img src={this.props.imageSrc} key={this.props.imageSrc} /&gt;\n    &lt;/ReactCSSTransitionGroup&gt;\n  &lt;/div&gt;\n);\n}\n});\nDisabling Animations #\nYou can disable animating enter or leave animations if you want. For example, sometimes you may want an enter animation and no leave animation, but ReactCSSTransitionGroup waits for an animation to complete before removing your DOM node. You can add transitionEnter={false} or transitionLeave={false} props to ReactCSSTransitionGroup to disable these animations.\n\n\nNote:\n\nWhen using ReactCSSTransitionGroup, there&#39;s no way for your components to be notified when a transition has ended or to perform any more complex logic around animation. If you want more fine-grained control, you can use the lower-level ReactTransitionGroup API which provides the hooks you need to do custom transitions.\n\nLow-level API: ReactTransitionGroup #\nReactTransitionGroup is the basis for animations. It is accessible as React.addons.TransitionGroup. When children are declaratively added or removed from it (as in the example above) special lifecycle hooks are called on them.\ncomponentWillAppear(callback) #\nThis is called at the same time as componentDidMount() for components that are initially mounted in a TransitionGroup. It will block other animations from occurring until callback is called. It is only called on the initial render of a TransitionGroup.\ncomponentDidAppear() #\nThis is called after the callback function that was passed to componentWillAppear is called.\ncomponentWillEnter(callback) #\nThis is called at the same time as componentDidMount() for components added to an existing TransitionGroup. It will block other animations from occurring until callback is called. It will not be called on the initial render of a TransitionGroup.\ncomponentDidEnter() #\nThis is called after the callback function that was passed to componentWillEnter is called.\ncomponentWillLeave(callback) #\nThis is called when the child has been removed from the ReactTransitionGroup. Though the child has been removed, ReactTransitionGroup will keep it in the DOM until callback is called.\ncomponentDidLeave() #\nThis is called when the willLeave callback is called (at the same time as componentWillUnmount).\nRendering a Different Component #\nBy default ReactTransitionGroup renders as a span. You can change this behavior by providing a component prop. For example, here&#39;s how you would render a &lt;ul&gt;:\n&lt;ReactTransitionGroup component=&quot;ul&quot;&gt;\n...\n&lt;/ReactTransitionGroup&gt;\n\n\nEvery DOM component that React can render is available for use. However, component does not need to be a DOM component. It can be any React component you want; even ones you&#39;ve written yourself!\n\n\nNote:\n\nPrior to v0.12, when using DOM components, the component prop needed to be a reference to React.DOM.*. Since the component is simply passed to React.createElement, it must now be a string. Composite components must pass the factory.\n\n\nAny additional, user-defined, properties will become properties of the rendered component. For example, here&#39;s how you would render a &lt;ul&gt; with css class:\n\n&lt;ReactTransitionGroup component=&quot;ul&quot; className=&quot;animated-list&quot;&gt;\n...\n&lt;/ReactTransitionGroup&gt;\n\n",
                "link": "/articles/animation.html",
                "date": "",
                "excerpt": "",
                "seach_omit": ""
            }
            
            
        
            
            ,{
                "title": "two-way-binding-helpers",
                "content": "ReactLink is an easy way to express two-way binding with React.\n\n\nNote:\n\nIf you&#39;re new to the framework, note that ReactLink is not needed for most applications and should be used cautiously.\n\n\nIn React, data flows one way: from owner to child. This is because data only flows one direction in the Von Neumann model of computing. You can think of it as &quot;one-way data binding.&quot;\n\nHowever, there are lots of applications that require you to read some data and flow it back into your program. For example, when developing forms, you&#39;ll often want to update some React state when you receive user input. Or perhaps you want to perform layout in JavaScript and react to changes in some DOM element size.\n\nIn React, you would implement this by listening to a &quot;change&quot; event, read from your data source (usually the DOM) and call setState() on one of your components. &quot;Closing the data flow loop&quot; explicitly leads to more understandable and easier-to-maintain programs. See our forms documentation for more information.\n\nTwo-way binding -- implicitly enforcing that some value in the DOM is always consistent with some React state -- is concise and supports a wide variety of applications. We&#39;ve provided ReactLink: syntactic sugar for setting up the common data flow loop pattern described above, or &quot;linking&quot; some data source to React state.\n\n\nNote:\n\nReactLink is just a thin wrapper and convention around the onChange/setState() pattern. It doesn&#39;t fundamentally change how data flows in your React application.\n\n\nReactLink: Before and After #\n\nHere&#39;s a simple form example without using ReactLink:\n\nvar NoLink = React.createClass({\n  getInitialState: function() {\n    return {message: &#39;Hello!&#39;};\n  },\n  handleChange: function(event) {\n    this.setState({message: event.target.value});\n  },\n  render: function() {\n    var message = this.state.message;\n    return &lt;input type=&quot;text&quot; value={message} onChange={this.handleChange} /&gt;;\n  }\n});\n\n\nThis works really well and it&#39;s very clear how data is flowing, however, with a lot of form fields it could get a bit verbose. Let&#39;s use ReactLink to save us some typing:\n\nvar WithLink = React.createClass({\n  mixins: [React.addons.LinkedStateMixin],\n  getInitialState: function() {\n    return {message: &#39;Hello!&#39;};\n  },\n  render: function() {\n    return &lt;input type=&quot;text&quot; valueLink={this.linkState(&#39;message&#39;)} /&gt;;\n  }\n});\n\n\nLinkedStateMixin adds a method to your React component called linkState(). linkState() returns a ReactLink object which contains the current value of the React state and a callback to change it.\n\nReactLink objects can be passed up and down the tree as props, so it&#39;s easy (and explicit) to set up two-way binding between a component deep in the hierarchy and state that lives higher in the hierarchy.\n\nNote that checkboxes have a special behavior regarding their value attribute, which is the value that will be sent on form submit if the checkbox is checked (defaults to on). The value attribute is not updated when the checkbox is checked or unchecked. For checkboxes, you should use checkedLink instead of valueLink:\n\n&lt;input type=&quot;checkbox&quot; checkedLink={this.linkState(&#39;booleanValue&#39;)} /&gt;\n\n\nUnder the Hood #\n\nThere are two sides to ReactLink: the place where you create the ReactLink instance and the place where you use it. To prove how simple ReactLink is, let&#39;s rewrite each side separately to be more explicit.\n\nReactLink Without LinkedStateMixin #var WithoutMixin = React.createClass({\n  getInitialState: function() {\n    return {message: &#39;Hello!&#39;};\n  },\n  handleChange: function(newValue) {\n    this.setState({message: newValue});\n  },\n  render: function() {\n    var valueLink = {\n      value: this.state.message,\n      requestChange: this.handleChange\n    };\n    return &lt;input type=&quot;text&quot; valueLink={valueLink} /&gt;;\n  }\n});\n\nAs you can see, ReactLink objects are very simple objects that just have a value and requestChange prop. And LinkedStateMixin is similarly simple: it just populates those fields with a value from this.state and a callback that calls this.setState().\nReactLink Without valueLink #var WithoutLink = React.createClass({\n  mixins: [React.addons.LinkedStateMixin],\n  getInitialState: function() {\n    return {message: &#39;Hello!&#39;};\n  },\n  render: function() {\n    var valueLink = this.linkState(&#39;message&#39;);\n    var handleChange = function(e) {\n      valueLink.requestChange(e.target.value);\n    };\n    return &lt;input type=&quot;text&quot; value={valueLink.value} onChange={handleChange} /&gt;;\n  }\n});\n\nThe valueLink prop is also quite simple. It simply handles the onChange event and calls this.props.valueLink.requestChange() and also uses this.props.valueLink.value instead of this.props.value. That&#39;s it!\n",
                "link": "/articles/two-way-binding-helpers.html",
                "date": "",
                "excerpt": "",
                "seach_omit": ""
            }
            
            
        
            
            ,{
                "title": "class-name-manipulation",
                "content": "\nNOTE:\n\nThis module now exists independently at JedWatson/classnames and is React-agnostic. The add-on here will thus be removed in the future.\n\n\nclassSet() is a neat utility for easily manipulating the DOM class string.\n\nHere&#39;s a common scenario and its solution without classSet():\n\n// inside some `&lt;Message /&gt;` React component\nrender: function() {\n  var classString = &#39;message&#39;;\n  if (this.props.isImportant) {\n    classString += &#39; message-important&#39;;\n  }\n  if (this.props.isRead) {\n    classString += &#39; message-read&#39;;\n  }\n  // &#39;message message-important message-read&#39;\n  return &lt;div className={classString}&gt;Great, I&#39;ll be there.&lt;/div&gt;;\n}\n\n\nThis can quickly get tedious, as assigning class name strings can be hard to read and error-prone. classSet() solves this problem:\n\nrender: function() {\n  var cx = React.addons.classSet;\n  var classes = cx({\n    &#39;message&#39;: true,\n    &#39;message-important&#39;: this.props.isImportant,\n    &#39;message-read&#39;: this.props.isRead\n  });\n  // same final string, but much cleaner\n  return &lt;div className={classes}&gt;Great, I&#39;ll be there.&lt;/div&gt;;\n}\n\n\nWhen using classSet(), pass an object with keys of the CSS class names you might or might not need. Truthy values will result in the key being a part of the resulting string.\n\nclassSet() also lets pass class names in as arguments that are then concatenated for you:\n\nrender: function() {\n  var cx = React.addons.classSet;\n  var importantModifier = &#39;message-important&#39;;\n  var readModifier = &#39;message-read&#39;;\n  var classes = cx(&#39;message&#39;, importantModifier, readModifier);\n  // Final string is &#39;message message-important message-read&#39;\n  return &lt;div className={classes}&gt;Great, I&#39;ll be there.&lt;/div&gt;;\n}\n\n\nNo more hacky string concatenations!\n",
                "link": "/articles/class-name-manipulation.html",
                "date": "",
                "excerpt": "",
                "seach_omit": ""
            }
            
            
        
            
            ,{
                "title": "test-utilities",
                "content": "React.addons.TestUtils makes it easy to test React components in the testing framework of your choice (we use Jest).\n\nSimulate #Simulate.{eventName}(DOMElement element, object eventData)\n\nSimulate an event dispatch on a DOM node with optional eventData event data. This is possibly the single most useful utility in ReactTestUtils.\n\nExample usage:\n\nvar node = React.findDOMNode(this.refs.input);\nReact.addons.TestUtils.Simulate.click(node);\nReact.addons.TestUtils.Simulate.change(node, {target: {value: &#39;Hello, world&#39;}});\nReact.addons.TestUtils.Simulate.keyDown(node, {key: &quot;Enter&quot;});\n\n\nSimulate has a method for every event that React understands.\n\nrenderIntoDocument #ReactComponent renderIntoDocument(ReactElement instance)\n\nRender a component into a detached DOM node in the document. This function requires a DOM.\nmockComponent #object mockComponent(function componentClass, string? mockTagName)\n\nPass a mocked component module to this method to augment it with useful methods that allow it to be used as a dummy React component. Instead of rendering as usual, the component will become a simple &lt;div&gt; (or other tag if mockTagName is provided) containing any provided children.\nisElement #boolean isElement(ReactElement element)\n\nReturns true if element is any ReactElement.\nisElementOfType #boolean isElementOfType(ReactElement element, function componentClass)\n\nReturns true if element is a ReactElement whose type is of a React componentClass.\nisDOMComponent #boolean isDOMComponent(ReactComponent instance)\n\nReturns true if instance is a DOM component (such as a &lt;div&gt; or &lt;span&gt;).\nisCompositeComponent #boolean isCompositeComponent(ReactComponent instance)`\n\nReturns true if instance is a composite component (created with React.createClass())\nisCompositeComponentWithType #boolean isCompositeComponentWithType(ReactComponent instance, function componentClass)\n\nReturns true if instance is a composite component (created with React.createClass()) whose type is of a React componentClass.\nfindAllInRenderedTree #array findAllInRenderedTree(ReactComponent tree, function test)\n\nTraverse all components in tree and accumulate all components where test(component) is true. This is not that useful on its own, but it&#39;s used as a primitive for other test utils.\nscryRenderedDOMComponentsWithClass #array scryRenderedDOMComponentsWithClass(ReactComponent tree, string className)\n\nFinds all instances of components in the rendered tree that are DOM components with the class name matching className.\nfindRenderedDOMComponentWithClass #ReactComponent findRenderedDOMComponentWithClass(ReactComponent tree, string className)\n\nLike scryRenderedDOMComponentsWithClass() but expects there to be one result, and returns that one result, or throws exception if there is any other number of matches besides one.\nscryRenderedDOMComponentsWithTag #array scryRenderedDOMComponentsWithTag(ReactComponent tree, string tagName)\n\nFinds all instances of components in the rendered tree that are DOM components with the tag name matching tagName.\nfindRenderedDOMComponentWithTag #ReactComponent findRenderedDOMComponentWithTag(ReactComponent tree, string tagName)\n\nLike scryRenderedDOMComponentsWithTag() but expects there to be one result, and returns that one result, or throws exception if there is any other number of matches besides one.\nscryRenderedComponentsWithType #array scryRenderedComponentsWithType(ReactComponent tree, function componentClass)\n\nFinds all instances of components with type equal to componentClass.\nfindRenderedComponentWithType #ReactComponent findRenderedComponentWithType(ReactComponent tree, function componentClass)\n\nSame as scryRenderedComponentsWithType() but expects there to be one result and returns that one result, or throws exception if there is any other number of matches besides one.\nShallow rendering #\nShallow rendering is an experimental feature that lets you render a component &quot;one level deep&quot; and assert facts about what its render method returns, without worrying about the behavior of child components, which are not instantiated or rendered. This does not require a DOM.\nReactShallowRenderer createRenderer()\n\nCall this in your tests to create a shallow renderer. You can think of this as a &quot;place&quot; to render the component you&#39;re testing, where it can respond to events and update itself.\nshallowRenderer.render(ReactElement element)\n\nSimilar to React.render.\nReactComponent shallowRenderer.getRenderOutput()\n\nAfter render has been called, returns shallowly rendered output. You can then begin to assert facts about the output. For example, if your component&#39;s render method returns:\n&lt;div&gt;\n  &lt;span className=&quot;heading&quot;&gt;Title&lt;/span&gt;\n  &lt;Subcomponent foo=&quot;bar&quot; /&gt;\n&lt;/div&gt;\n\nThen you can assert:\nresult = renderer.getRenderOutput();\nexpect(result.type).toBe(&#39;div&#39;);\nexpect(result.props.children).toEqual([\n  &lt;span className=&quot;heading&quot;&gt;Title&lt;/span&gt;,\n  &lt;Subcomponent foo=&quot;bar&quot; /&gt;\n]);\n\nShallow testing currently has some limitations, namely not supporting refs. We&#39;re releasing this feature early and would appreciate the React community&#39;s feedback on how it should evolve.\n",
                "link": "/articles/test-utilities.html",
                "date": "",
                "excerpt": "",
                "seach_omit": ""
            }
            
            
        
            
            ,{
                "title": "clone-with-props",
                "content": "\nNote:\ncloneWithProps is deprecated. Use React.cloneElement instead.\n\n\nIn rare situations, you may want to create a copy of a React element with different props from those of the original element. One example is cloning the elements passed into this.props.children and rendering them with different props:\n\nvar _makeBlue = function(element) {\n  return React.addons.cloneWithProps(element, {style: {color: &#39;blue&#39;}});\n};\n\nvar Blue = React.createClass({\n  render: function() {\n    var blueChildren = React.Children.map(this.props.children, _makeBlue);\n    return &lt;div&gt;{blueChildren}&lt;/div&gt;;\n  }\n});\n\nReact.render(\n  &lt;Blue&gt;\n    &lt;p&gt;This text is blue.&lt;/p&gt;\n  &lt;/Blue&gt;,\n  document.getElementById(&#39;container&#39;)\n);\n\n\ncloneWithProps does not transfer key or ref to the cloned element. className and style props are automatically merged.\n",
                "link": "/articles/clone-with-props.html",
                "date": "",
                "excerpt": "",
                "seach_omit": ""
            }
            
            
        
            
            ,{
                "title": "create-fragment",
                "content": "In most cases, you can use the key prop to specify keys on the elements you&#39;re returning from render. However, this breaks down in one situation: if you have two sets of children that you need to reorder, there&#39;s no way to put a key on each set without adding a wrapper element.\n\nThat is, if you have a component such as:\n\nvar Swapper = React.createClass({\n  propTypes: {\n    // `leftChildren` and `rightChildren` can be a string, element, array, etc.\n    leftChildren: React.PropTypes.node,\n    rightChildren: React.PropTypes.node,\n\n    swapped: React.PropTypes.bool\n  }\n  render: function() {\n    var children;\n    if (this.props.swapped) {\n      children = [this.props.rightChildren, this.props.leftChildren];\n    } else {\n      children = [this.props.leftChildren, this.props.rightChildren];\n    }\n    return &lt;div&gt;{children}&lt;/div&gt;;\n  }\n});\n\n\nThe children will unmount and remount as you change the swapped prop because there aren&#39;t any keys marked on the two sets of children.\n\nTo solve this problem, you can use React.addons.createFragment to give keys to the sets of children.\n\nReactFragment React.addons.createFragment(object children) #\n\nInstead of creating arrays, we write:\n\nif (this.props.swapped) {\n  children = React.addons.createFragment({\n    right: this.props.rightChildren,\n    left: this.props.leftChildren\n  });\n} else {\n  children = React.addons.createFragment({\n    left: this.props.leftChildren,\n    right: this.props.rightChildren\n  });\n}\n\n\nThe keys of the passed object (that is, left and right) are used as keys for the entire set of children, and the order of the object&#39;s keys is used to determine the order of the rendered children. With this change, the two sets of children will be properly reordered in the DOM without unmounting.\n\nThe return value of createFragment should be treated as an opaque object; you can use the React.Children helpers to loop through a fragment but should not access it directly. Note also that we&#39;re relying on the JavaScript engine preserving object enumeration order here, which is not guaranteed by the spec but is implemented by all major browsers and VMs for objects with non-numeric keys.\n\n\nNote:\n\nIn the future, createFragment may be replaced by an API such as\nreturn (\n  &lt;div&gt;\n    &lt;x:frag key=&quot;right&quot;&gt;{this.props.rightChildren}&lt;/x:frag&gt;,\n    &lt;x:frag key=&quot;left&quot;&gt;{this.props.leftChildren}&lt;/x:frag&gt;\n  &lt;/div&gt;\n);\n\nallowing you to assign keys directly in JSX without adding wrapper elements.\n\n",
                "link": "/articles/create-fragment.html",
                "date": "",
                "excerpt": "",
                "seach_omit": ""
            }
            
            
        
            
            ,{
                "title": "immutability-helpers",
                "content": "React lets you use whatever style of data management you want, including mutation. However, if you can use immutable data in performance-critical parts of your application it&#39;s easy to implement a fast shouldComponentUpdate() method to significantly speed up your app.\n\nDealing with immutable data in JavaScript is more difficult than in languages designed for it, like Clojure. However, we&#39;ve provided a simple immutability helper, update(), that makes dealing with this type of data much easier, without fundamentally changing how your data is represented. You can also take a look at Facebook&#39;s Immutable-js and the Advanced Performance section for more detail on Immutable-js.\n\nThe main idea #\n\nIf you mutate data like this:\n\nmyData.x.y.z = 7;\n// or...\nmyData.a.b.push(9);\n\n\nyou have no way of determining which data has changed since the previous copy has been overwritten. Instead, you need to create a new copy of myData and change only the parts of it that need to be changed. Then you can compare the old copy of myData with the new one in shouldComponentUpdate() using triple-equals:\n\nvar newData = deepCopy(myData);\nnewData.x.y.z = 7;\nnewData.a.b.push(9);\n\n\nUnfortunately, deep copies are expensive, and sometimes impossible. You can alleviate this by only copying objects that need to be changed and by reusing the objects that haven&#39;t changed. Unfortunately, in today&#39;s JavaScript this can be cumbersome:\n\nvar newData = extend(myData, {\nx: extend(myData.x, {\ny: extend(myData.x.y, {z: 7}),\n}),\na: extend(myData.a, {b: myData.a.b.concat(9)})\n});\n\n\nWhile this is fairly performant (since it only makes a shallow copy of log n objects and reuses the rest), it&#39;s a big pain to write. Look at all the repetition! This is not only annoying, but also provides a large surface area for bugs.\n\nupdate() provides simple syntactic sugar around this pattern to make writing this code easier. This code becomes:\n\nvar newData = React.addons.update(myData, {\nx: {y: {z: {$set: 7}}},\na: {b: {$push: [9]}}\n});\n\n\nWhile the syntax takes a little getting used to (though it&#39;s inspired by MongoDB&#39;s query language) there&#39;s no redundancy, it&#39;s statically analyzable and it&#39;s not much more typing than the mutative version.\n\nThe $-prefixed keys are called commands. The data structure they are &quot;mutating&quot; is called the target.\n\nAvailable commands #\n\n\n{$push: array} push() all the items in array on the target.\n{$unshift: array} unshift() all the items in array on the target.\n{$splice: array of arrays} for each item in arrays call splice() on the target with the parameters provided by the item.\n{$set: any} replace the target entirely.\n{$merge: object} merge the keys of object with the target.\n{$apply: function} passes in the current value to the function and updates it with the new returned value.\n\n\nExamples #Simple push #var initialArray = [1, 2, 3];\nvar newArray = update(initialArray, {$push: [4]}); // =&gt; [1, 2, 3, 4]\n\ninitialArray is still [1, 2, 3].\nNested collections #var collection = [1, 2, {a: [12, 17, 15]}];\nvar newCollection = update(collection, {2: {a: {$splice: [[1, 1, 13, 14]]}}});\n// =&gt; [1, 2, {a: [12, 13, 14, 15]}]\n\nThis accesses collection&#39;s index 2, key a, and does a splice of one item starting from index 1 (to remove 17) while inserting 13 and 14.\nUpdating a value based on its current one #var obj = {a: 5, b: 3};\nvar newObj = update(obj, {b: {$apply: function(x) {return x  2;}}});\n// =&gt; {a: 5, b: 6}\n// This is equivalent, but gets verbose for deeply nested collections:\nvar newObj2 = update(obj, {b: {$set: obj.b  2}});\n(Shallow) merge #var obj = {a: 5, b: 3};\nvar newObj = update(obj, {$merge: {b: 6, c: 7}}); // =&gt; {a: 5, b: 6, c: 7}\n\n",
                "link": "/articles/immutability-helpers.html",
                "date": "",
                "excerpt": "",
                "seach_omit": ""
            }
            
            
        
            
            ,{
                "title": "pure-render-mixin",
                "content": "If your React component&#39;s render function is &quot;pure&quot; (in other words, it renders the same result given the same props and state), you can use this mixin for a performance boost in some cases.\n\nExample:\n\nvar PureRenderMixin = require(&#39;react/addons&#39;).addons.PureRenderMixin;\nReact.createClass({\n  mixins: [PureRenderMixin],\n\n  render: function() {\n    return &lt;div className={this.props.className}&gt;foo&lt;/div&gt;;\n  }\n});\n\n\nUnder the hood, the mixin implements shouldComponentUpdate, in which it compares the current props and state with the next ones and returns false if the equalities pass.\n\n\nNote:\n\nThis only shallowly compares the objects. If these contain complex data structures, it may produce false-negatives for deeper differences. Only mix into components which have simple props and state, or use forceUpdate() when you know deep data structures have changed. Or, consider using immutable objects to facilitate fast comparisons of nested data.\n\nFurthermore, shouldComponentUpdate skips updates for the whole component subtree. Make sure all the children components are also &quot;pure&quot;.\n\n",
                "link": "/articles/pure-render-mixin.html",
                "date": "",
                "excerpt": "",
                "seach_omit": ""
            }
            
            
        
            
            ,{
                "title": "performance-tools",
                "content": "React is usually quite fast out of the box. However, in situations where you need to squeeze every ounce of performance out of your app, it provides a shouldComponentUpdate hook where you can add optimization hints to React&#39;s diff algorithm.\n\nIn addition to giving you an overview of your app&#39;s overall performance, ReactPerf is a profiling tool that tells you exactly where you need to put these hooks.\n\n\nNote:\n\nThe dev build of React is slower than the prod build, due to all the extra logic for providing, for example, React&#39;s friendly console warnings (stripped away in the prod build). Therefore, the profiler only serves to indicate the relatively expensive parts of your app.\n\n\nGeneral API #\n\nThe Perf object documented here is exposed as React.addons.Perf when using the react-with-addons.js build in development mode.\n\nPerf.start() and Perf.stop() #\n\nStart/stop the measurement. The React operations in-between are recorded for analyses below. Operations that took an insignificant amount of time are ignored.\n\nPerf.printInclusive(measurements) #\n\nPrints the overall time taken. If no argument&#39;s passed, defaults to all the measurements from the last recording. This prints a nicely formatted table in the console, like so:\n\n\n\nPerf.printExclusive(measurements) #\n\n&quot;Exclusive&quot; times don&#39;t include the times taken to mount the components: processing props, getInitialState, call componentWillMount and componentDidMount, etc.\n\n\n\nPerf.printWasted(measurements) #\n\nThe most useful part of the profiler.\n\n&quot;Wasted&quot; time is spent on components that didn&#39;t actually render anything, e.g. the render stayed the same, so the DOM wasn&#39;t touched.\n\n\n\nPerf.printDOM(measurements) #\n\nPrints the underlying DOM manipulations, e.g. &quot;set innerHTML&quot; and &quot;remove&quot;.\n\n\n\nAdvanced API #\n\nThe above print methods use Perf.getLastMeasurements() to pretty-print the result.\n\nPerf.getLastMeasurements() #\n\nGet the measurements array from the last start-stop session. The array contains objects, each of which looks like this:\n\n{\n  // The term &quot;inclusive&quot; and &quot;exclusive&quot; are explained below\n  &quot;exclusive&quot;: {},\n  // &#39;.0.0&#39; is the React ID of the node\n  &quot;inclusive&quot;: {&quot;.0.0&quot;: 0.0670000008540228, &quot;.0&quot;: 0.3259999939473346},\n  &quot;render&quot;: {&quot;.0&quot;: 0.036999990697950125, &quot;.0.0&quot;: 0.010000003385357559},\n  // Number of instances\n  &quot;counts&quot;: {&quot;.0&quot;: 1, &quot;.0.0&quot;: 1},\n  // DOM touches\n  &quot;writes&quot;: {},\n  // Extra debugging info\n  &quot;displayNames&quot;: {\n    &quot;.0&quot;: {&quot;current&quot;: &quot;App&quot;, &quot;owner&quot;: &quot;&lt;root&gt;&quot;},\n    &quot;.0.0&quot;: {&quot;current&quot;: &quot;Box&quot;, &quot;owner&quot;: &quot;App&quot;}\n  },\n  &quot;totalTime&quot;: 0.48499999684281647\n}\n\n",
                "link": "/articles/performance-tools.html",
                "date": "",
                "excerpt": "",
                "seach_omit": ""
            }
            
            
        
    




    
    ,{
        "title": "doc-site-from-scratch",
        "content": "为了帮助 MINDPIN 团队把团队内的各种文档有效地组织起来，我围绕以下要点进行了一系列调研：\n\n\nGitHub Help 站点的内容组织和页面导航\nGitHub Help 与 Facebook React Doc 两个站点的部分实用 feature\n\n\nGitHub Flavored Markdown\n无后端的全文搜索（lunrjs）\n为若干篇文档按类别生成独立的索引页\n为一篇文档指定前置文档和后继文档\n为一篇文档指定若干个子文档\n在父文档的正文内自动生成子文档列表\n多篇不同的文档中引用同一段文字（conref）\n\n\n\n接下来的文档将首先介绍在本地 Debian Linux 虚拟机环境下运行的 jekyll 文档站的基本配置。\n",
        "link": "/articles/doc-site-from-scratch.html",
        "date": "3013-01-01 00:00:00 +0800",
        "excerpt": "",
        "seach_omit": ""
    }
    
    

    
    ,{
        "title": "help-doc-research",
        "content": "Help Doc 相关调研，参考了 GitHub Help 和 Facebook React Docs\n",
        "link": "/articles/help-doc-research.html",
        "date": "3012-01-01 00:00:00 +0800",
        "excerpt": "",
        "seach_omit": ""
    }
    
    

    
    ,{
        "title": "advanced-performance",
        "content": "One of the first questions people ask when considering React for a project is whether their application will be as fast and responsive as an equivalent non-React version. The idea of re-rendering an entire subtree of components in response to every state change makes people wonder whether this process negatively impacts performance. React uses several clever techniques to minimize the number of costly DOM operations required to update the UI.\n\nAvoiding reconciling the DOM #\n\nReact makes use of a virtual DOM, which is a descriptor of a DOM subtree rendered in the browser. This parallel representation allows React to avoid creating DOM nodes and accessing existing ones, which is slower than operations on JavaScript objects. When a component&#39;s props or state change, React decides whether an actual DOM update is necessary by constructing a new virtual DOM and comparing it to the old one. Only in the case they are not equal, will React reconcile the DOM, applying as few mutations as possible.\n\nOn top of this, React provides a component lifecycle function, shouldComponentUpdate, which is triggered before the re-rendering process starts (virtual DOM comparison and possible eventual DOM reconciliation), giving the developer the ability to short circuit this process. The default implementation of this function returns true, leaving React to perform the update:\n\nshouldComponentUpdate: function(nextProps, nextState) {\n  return true;\n}\n\n\nKeep in mind that React will invoke this function pretty often, so the implementation has to be fast.\n\nSay you have a messaging application with several chat threads. Suppose only one of the threads has changed. If we implement shouldComponentUpdate on the ChatThread component, React can skip the rendering step for the other threads:\n\nshouldComponentUpdate: function(nextProps, nextState) {\n  // TODO: return whether or not current chat thread is\n  // different to former one.\n}\n\n\nSo, in summary, React avoids carrying out expensive DOM operations required to reconcile subtrees of the DOM by allowing the user to short circuit the process using shouldComponentUpdate, and, for those which should update, by comparing virtual DOMs.\n\nshouldComponentUpdate in action #\n\nHere&#39;s a subtree of components. For each one is indicated what shouldComponentUpdate returned and whether or not the virtual DOMs were equivalent. Finally, the circle&#39;s color indicates whether the component had to be reconciled or not.\n\n\n\nIn the example above, since shouldComponentUpdate returned false for the subtree rooted at C2, React had no need to generate the new virtual DOM, and therefore, it neither needed to reconcile the DOM. Note that React didn&#39;t even have to invoke shouldComponentUpdate on C4 and C5.\n\nFor C1 and C3 shouldComponentUpdate returned true, so React had to go down to the leaves and check them. For C6 it returned true; since the virtual DOMs weren&#39;t equivalent it had to reconcile the DOM.\nThe last interesting case is C8. For this node React had to compute the virtual DOM, but since it was equal to the old one, it didn&#39;t have to reconcile it&#39;s DOM.\n\nNote that React only had to do DOM mutations for C6, which was inevitable. For C8, it bailed out by comparing the virtual DOMs, and for C2&#39;s subtree and C7, it didn&#39;t even have to compute the virtual DOM as we bailed out on shouldComponentUpdate.\n\nSo, how should we implement shouldComponentUpdate? Say that you have a component that just renders a string value:\n\nReact.createClass({\n  propTypes: {\n    value: React.PropTypes.string.isRequired\n  },\n\n  render: function() {\n    return &lt;div&gt;this.props.value&lt;/div&gt;;\n  }\n});\n\n\nWe could easily implement shouldComponentUpdate as follow:\n\nshouldComponentUpdate: function(nextProps, nextState) {\n  return this.props.value !== nextProps.value;\n}\n\n\nSo far so good, dealing with such simple props/state structures is easy. We could even generalize an implementation based on shallow equality and mix it into components. In fact, React already provides such implementation: PureRenderMixin.\n\nBut what if your components&#39; props or state are mutable data structures?. Say the prop the component receives, instead of being a string like &#39;bar&#39;, is a Javascript object that contains a string such as, { foo: &#39;bar&#39; }:\n\nReact.createClass({\n  propTypes: {\n    value: React.PropTypes.object.isRequired\n  },\n\n  render: function() {\n    return &lt;div&gt;this.props.value.foo&lt;/div&gt;;\n  }\n});\n\n\nThe implementation of shouldComponentUpdate we had before wouldn&#39;t always work as expected:\n\n// assume this.props.value is { foo: &#39;bar&#39; }\n// assume nextProps.value is { foo: &#39;bar&#39; },\n// but this reference is different to this.props.value\nthis.props.value !== nextProps.value; // true\n\n\nThe problem is shouldComponentUpdate will return true when the prop actually didn&#39;t change. To fix this, we could come up with this alternative implementation:\n\nshouldComponentUpdate: function(nextProps, nextState) {\n  return this.props.value.foo !== nextProps.value.foo;\n}\n\n\nBasically, we ended up doing a deep comparison to make sure we properly track changes. In terms of performance, this approach is pretty expensive. It doesn&#39;t scale as we would have to write different deep equality code for each model. On top of that, it might not even work if we don&#39;t carefully manage object references. Say this component is used by a parent:\n\nReact.createClass({\n  getInitialState: function() {\n    return { value: { foo: &#39;bar&#39; } };\n  },\n\n  onClick: function() {\n    var value = this.state.value;\n    value.foo += &#39;bar&#39;; // ANTI-PATTERN!\n    this.setState({ value: value });\n  },\n\n  render: function() {\n    return (\n      &lt;div&gt;\n        &lt;InnerComponent value={this.state.value} /&gt;\n        &lt;a onClick={this.onClick}&gt;Click me&lt;/a&gt;\n      &lt;/div&gt;\n    );\n  }\n});\n\n\nThe first time the inner component gets rendered, it will have { foo: &#39;bar&#39; } as the value prop. If the user clicks on the anchor, the parent component&#39;s state will get updated to { value: { foo: &#39;barbar&#39; } }, triggering the re-rendering process of the inner component, which will receive { foo: &#39;barbar&#39; } as the new value for the prop.\n\nThe problem is that since the parent and inner components share a reference to the same object, when the object gets mutated on line 2 of the onClick function, the prop the inner component had will change. So, when the re-rendering process starts, and shouldComponentUpdate gets invoked, this.props.value.foo will be equal to nextProps.value.foo, because in fact, this.props.value references the same object as nextProps.value.\n\nConsequently, since we&#39;ll miss the change on the prop and short circuit the re-rendering process, the UI won&#39;t get updated from &#39;bar&#39; to &#39;barbar&#39;.\n\nImmutable-js to the rescue #\n\nImmutable-js is a Javascript collections library  written by Lee Byron, which Facebook recently open-sourced. It provides immutable persistent collections via structural sharing. Lets see what these properties mean:\n\n\nImmutable: once created, a collection cannot be altered at another point in time.\nPersistent: new collections can be created from a previous collection and a mutation such as set. The original collection is still valid after the new collection is created.\nStructural Sharing: new collections are created using as much of the same structure as the original collection as possible, reducing copying to a minimum to achieve space efficiency and acceptable performance. If the new collection is equal to the original, the original is often returned.\n\n\nImmutability makes tracking changes cheap; a change will always result in a new object so we only need to check if the reference to the object has changed. For example, in this regular Javascript code:\n\nvar x = { foo: &quot;bar&quot; };\nvar y = x;\ny.foo = &quot;baz&quot;;\nx === y; // true\n\n\nAlthough y was edited, since it&#39;s a reference to the same object as x, this comparison returns true. However, this code could be written using immutable-js as follows:\n\nvar SomeRecord = Immutable.Record({ foo: null });\nvar x = new SomeRecord({ foo: &#39;bar&#39;  });\nvar y = x.set(&#39;foo&#39;, &#39;baz&#39;);\nx === y; // false\n\n\nIn this case, since a new reference is returned when mutating x, we can safely assume that x has changed.\n\nAnother possible way to track changes could be doing dirty checking by having a flag set by setters. A problem with this approach is that it forces you to use setters and, either write a lot of additional code, or somehow instrument your classes. Alternatively, you could deep copy the object just before the mutations and deep compare to determine whether there was a change or not. A problem with this approach is both deepCopy and deepCompare are expensive operations.\n\nSo, Immutable data structures provides you a cheap and less verbose way to track changes on objects, which is all we need to implement shouldComponentUpdate. Therefore, if we model props and state attributes using the abstractions provided by immutable-js we&#39;ll be able to use PureRenderMixin and get a nice boost in perf.\n\nImmutable-js and Flux #\n\nIf you&#39;re using Flux, you should start writing your stores using immutable-js. Take a look at the full API.\n\nLet&#39;s see one possible way to model the thread example using Immutable data structures. First, we need to define a Record for each of the entities we&#39;re trying to model. Records are just immutable containers that hold values for a specific set of fields:\n\nvar User = Immutable.Record({\n  id: undefined,\n  name: undefined,\n  email: undefined\n});\n\nvar Message = Immutable.Record({\n  timestamp: new Date(),\n  sender: undefined,\n  text: &#39;&#39;\n});\n\n\nThe Record function receives an object that defines the fields the object has and its default values.\n\nThe messages store could keep track of the users and messages using two lists:\n\nthis.users = Immutable.List();\nthis.messages = Immutable.List();\n\n\nIt should be pretty straightforward to implement functions to process each payload type. For instance, when the store sees a payload representing a new message,  we can just create a new record and append it to the messages list:\n\nthis.messages = this.messages.push(new Message({\n  timestamp: payload.timestamp,\n  sender: payload.sender,\n  text: payload.text\n});\n\n\nNote that since the data structures are immutable, we need to assign the result of the push function to this.messages.\n\nOn the React side, if we also use immutable-js data structures to hold the components&#39; state, we could mix PureRenderMixin into all our components and short circuit the re-rendering process.\n",
        "link": "/articles/advanced-performance.html",
        "date": "3011-01-01 00:00:00 +0800",
        "excerpt": "",
        "seach_omit": ""
    }
    
    

    
    ,{
        "title": "addons",
        "content": "React.addons is where we park some useful utilities for building React apps. These should be considered experimental but will eventually be rolled into core or a blessed utilities library:\n\n\nTransitionGroup and CSSTransitionGroup, for dealing with animations and transitions that are usually not simple to implement, such as before a component&#39;s removal.\nLinkedStateMixin, to simplify the coordination between user&#39;s form input data and the component&#39;s state.\ncloneWithProps, to make shallow copies of React components and change their props.\ncreateFragment, to create a set of externally-keyed children.\nupdate, a helper function that makes dealing with immutable data in JavaScript easier.\nPureRenderMixin, a performance booster under certain situations.\n\n\nThe add-ons below are in the development (unminified) version of React only:\n\n\nTestUtils, simple helpers for writing test cases (unminified build only).\nPerf, for measuring performance and giving you hint where to optimize.\n\n\nTo get the add-ons, use react-with-addons.js (and its minified counterpart) rather than the common react.js.\n\nWhen using the react package from npm, simply require(&#39;react/addons&#39;) instead of require(&#39;react&#39;) to get React with all of the add-ons.\n\n\n  \n\n",
        "link": "/articles/addons.html",
        "date": "3010-01-01 00:00:00 +0800",
        "excerpt": "",
        "seach_omit": ""
    }
    
    

    
    ,{
        "title": "tooling-integration",
        "content": "Every project uses a different system for building and deploying JavaScript. We&#39;ve tried to make React as environment-agnostic as possible.\n\nReact #CDN-hosted React #\nWe provide CDN-hosted versions of React on our download page. These prebuilt files use the UMD module format. Dropping them in with a simple &lt;script&gt; tag will inject a React global into your environment. It should also work out-of-the-box in CommonJS and AMD environments.\nUsing master #\nWe have instructions for building from master in our GitHub repository. We build a tree of CommonJS modules under build/modules which you can drop into any environment or packaging tool that supports CommonJS.\nJSX #In-browser JSX Transform #\nIf you like using JSX, we provide an in-browser JSX transformer for development on our download page. Simply include a &lt;script type=&quot;text/jsx&quot;&gt; tag to engage the JSX transformer.\n\n\nNote:\n\nThe in-browser JSX transformer is fairly large and results in extraneous computation client-side that can be avoided. Do not use it in production — see the next section.\n\n\nProductionizing: Precompiled JSX #\n\nIf you have npm, you can simply run npm install -g react-tools to install our command-line jsx tool. This tool will translate files that use JSX syntax to plain JavaScript files that can run directly in the browser. It will also watch directories for you and automatically transform files when they are changed; for example: jsx --watch src/ build/.\n\nBy default JSX files with a .js extension are transformed. Use jsx --extension jsx src/ build/ to transform files with a .jsx extension.\n\nRun jsx --help for more information on how to use this tool.\n\nHelpful Open-Source Projects #\n\nThe open-source community has built tools that integrate JSX with several editors and build systems. See JSX integrations for the full list.\n",
        "link": "/articles/tooling-integration.html",
        "date": "3009-01-01 00:00:00 +0800",
        "excerpt": "",
        "seach_omit": ""
    }
    
    

    
    ,{
        "title": "working-with-the-browser",
        "content": "React provides powerful abstractions that free you from touching the DOM directly in most cases, but sometimes you simply need to access the underlying API, perhaps to work with a third-party library or existing code.\n\nThe Virtual DOM #\n\nReact is so fast because it never talks to the DOM directly. React maintains a fast in-memory representation of the DOM. render() methods return a description of the DOM, and React can diff this description with the in-memory representation to compute the fastest way to update the browser.\n\nAdditionally, React implements a full synthetic event system such that all event objects are guaranteed to conform to the W3C spec despite browser quirks, and everything bubbles consistently and efficiently across browsers. You can even use some HTML5 events in IE8!\n\nMost of the time you should stay within React&#39;s &quot;faked browser&quot; world since it&#39;s more performant and easier to reason about. However, sometimes you simply need to access the underlying API, perhaps to work with a third-party library like a jQuery plugin. React provides escape hatches for you to use the underlying DOM API directly.\n\nRefs and findDOMNode() #\n\nTo interact with the browser, you&#39;ll need a reference to a DOM node. React has a React.findDOMNode(component) function which you can call to get a reference to the component&#39;s DOM node.\n\n\nNote:\n\nfindDOMNode() only works on mounted components (that is, components that have been placed in the DOM). If you try to call this on a component that has not been mounted yet (like calling findDOMNode() in render() on a component that has yet to be created) an exception will be thrown.\n\n\nIn order to get a reference to a React component, you can either use this to get the current React component, or you can use refs to refer to a component you own. They work like this:\n\nvar MyComponent = React.createClass({\n  handleClick: function() {\n    // Explicitly focus the text input using the raw DOM API.\n    React.findDOMNode(this.refs.myTextInput).focus();\n  },\n  render: function() {\n    // The ref attribute adds a reference to the component to\n    // this.refs when the component is mounted.\n    return (\n      &lt;div&gt;\n        &lt;input type=&quot;text&quot; ref=&quot;myTextInput&quot; /&gt;\n        &lt;input\n          type=&quot;button&quot;\n          value=&quot;Focus the text input&quot;\n          onClick={this.handleClick}\n        /&gt;\n      &lt;/div&gt;\n    );\n  }\n});\n\nReact.render(\n  &lt;MyComponent /&gt;,\n  document.getElementById(&#39;example&#39;)\n);\nMore About Refs #\nTo learn more about refs, including ways to use them effectively, see our more about refs documentation.\nComponent Lifecycle #\nComponents have three main parts of their lifecycle:\n\n\nMounting: A component is being inserted into the DOM.\nUpdating: A component is being re-rendered to determine if the DOM should be updated.\nUnmounting: A component is being removed from the DOM.\n\n\nReact provides lifecycle methods that you can specify to hook into this process. We provide will methods, which are called right before something happens, and did methods which are called right after something happens.\n\nMounting #\n\n\ngetInitialState(): object is invoked before a component is mounted. Stateful components should implement this and return the initial state data.\ncomponentWillMount() is invoked immediately before mounting occurs.\ncomponentDidMount() is invoked immediately after mounting occurs. Initialization that requires DOM nodes should go here.\n\n\nUpdating #\n\n\ncomponentWillReceiveProps(object nextProps) is invoked when a mounted component receives new props. This method should be used to compare this.props and nextProps to perform state transitions using this.setState().\nshouldComponentUpdate(object nextProps, object nextState): boolean is invoked when a component decides whether any changes warrant an update to the DOM. Implement this as an optimization to compare this.props with nextProps and this.state with nextState and return false if React should skip updating.\ncomponentWillUpdate(object nextProps, object nextState) is invoked immediately before updating occurs. You cannot call this.setState() here.\ncomponentDidUpdate(object prevProps, object prevState) is invoked immediately after updating occurs.\n\n\nUnmounting #\n\n\ncomponentWillUnmount() is invoked immediately before a component is unmounted and destroyed. Cleanup should go here.\n\n\nMounted Methods #\n\nMounted composite components also support the following methods:\n\n\nfindDOMNode(): DOMElement can be invoked on any mounted component in order to obtain a reference to its rendered DOM node.\nforceUpdate() can be invoked on any mounted component when you know that some deeper aspect of the component&#39;s state has changed without using this.setState().\n\n\nBrowser Support and Polyfills #\n\nAt Facebook, we support older browsers, including IE8. We&#39;ve had polyfills in place for a long time to allow us to write forward-thinking JS. This means we don&#39;t have a bunch of hacks scattered throughout our codebase and we can still expect our code to &quot;just work&quot;. For example, instead of seeing +new Date(), we can just write Date.now(). Since the open source React is the same as what we use internally, we&#39;ve carried over this philosophy of using forward thinking JS.\n\nIn addition to that philosophy, we&#39;ve also taken the stance that we, as authors of a JS library, should not be shipping polyfills as a part of our library. If every library did this, there&#39;s a good chance you&#39;d be sending down the same polyfill multiple times, which could be a sizable chunk of dead code. If your product needs to support older browsers, chances are you&#39;re already using something like es5-shim.\n\nPolyfills Needed to Support Older Browsers #\n\nes5-shim.js from kriskowal&#39;s es5-shim provides the following that React needs:\n\n\nArray.isArray\nArray.prototype.every\nArray.prototype.forEach\nArray.prototype.indexOf\nArray.prototype.map\nDate.now\nFunction.prototype.bind\nObject.keys\nString.prototype.split\nString.prototype.trim\n\n\nes5-sham.js, also from kriskowal&#39;s es5-shim, provides the following that React needs:\n\n\nObject.create\nObject.freeze\n\n\nThe unminified build of React needs the following from paulmillr&#39;s console-polyfill.\n\n\nconsole.*\n\n\nWhen using HTML5 elements in IE8 including &lt;section&gt;, &lt;article&gt;, &lt;nav&gt;, &lt;header&gt;, and &lt;footer&gt;, it&#39;s also necessary to include html5shiv or a similar script.\n\nCross-browser Issues #\n\nAlthough React is pretty good at abstracting browser differences, some browsers are limited or present quirky behaviors that we couldn&#39;t find a workaround for.\n\nonScroll event on IE8 #\n\nOn IE8 the onScroll event doesn&#39;t bubble and IE8 doesn&#39;t have an API to define handlers to the capturing phase of an event, meaning there is no way for React to listen to these events.\nCurrently a handler to this event is ignored on IE8.\n\nSee the onScroll doesn&#39;t work in IE8 GitHub issue for more information.\n\n\n  \n\n",
        "link": "/articles/working-with-the-browser.html",
        "date": "3008-01-01 00:00:00 +0800",
        "excerpt": "",
        "seach_omit": ""
    }
    
    

    
    ,{
        "title": "forms",
        "content": "Form components such as &lt;input&gt;, &lt;textarea&gt;, and &lt;option&gt; differ from other native components because they can be mutated via user interactions. These components provide interfaces that make it easier to manage forms in response to user interactions.\n\nFor information on events on &lt;form&gt; see Form Events.\n\nInteractive Props #\n\nForm components support a few props that are affected via user interactions:\n\n\nvalue, supported by &lt;input&gt; and &lt;textarea&gt; components.\nchecked, supported by &lt;input&gt; components of type checkbox or radio.\nselected, supported by &lt;option&gt; components.\n\n\nIn HTML, the value of &lt;textarea&gt; is set via children. In React, you should use value instead.\n\nForm components allow listening for changes by setting a callback to the onChange prop. The onChange prop works across browsers to fire in response to user interactions when:\n\n\nThe value of &lt;input&gt; or &lt;textarea&gt; changes.\nThe checked state of &lt;input&gt; changes.\nThe selected state of &lt;option&gt; changes.\n\n\nLike all DOM events, the onChange prop is supported on all native components and can be used to listen to bubbled change events.\n\n\nNote:\n\nFor &lt;input&gt; and &lt;textarea&gt;, onChange supersedes — and should generally be used instead of — the DOM&#39;s built-in oninput event handler.\n\n\nControlled Components #\n\nAn &lt;input&gt; with value set is a controlled component. In a controlled &lt;input&gt;, the value of the rendered element will always reflect the value prop. For example:\n\n  render: function() {\n    return &lt;input type=&quot;text&quot; value=&quot;Hello!&quot; /&gt;;\n  }\n\n\nThis will render an input that always has a value of Hello!. Any user input will have no effect on the rendered element because React has declared the value to be Hello!. If you wanted to update the value in response to user input, you could use the onChange event:\n\n  getInitialState: function() {\n    return {value: &#39;Hello!&#39;};\n  },\n  handleChange: function(event) {\n    this.setState({value: event.target.value});\n  },\n  render: function() {\n    var value = this.state.value;\n    return &lt;input type=&quot;text&quot; value={value} onChange={this.handleChange} /&gt;;\n  }\n\n\nIn this example, we are simply accepting the newest value provided by the user and updating the value prop of the &lt;input&gt; component. This pattern makes it easy to implement interfaces that respond to or validate user interactions. For example:\n\n  handleChange: function(event) {\n    this.setState({value: event.target.value.substr(0, 140)});\n  }\n\n\nThis would accept user input but truncate the value to the first 140 characters.\n\nUncontrolled Components #\n\nAn &lt;input&gt; that does not supply a value (or sets it to null) is an uncontrolled component. In an uncontrolled &lt;input&gt;, the value of the rendered element will reflect the user&#39;s input. For example:\n\n  render: function() {\n    return &lt;input type=&quot;text&quot; /&gt;;\n  }\n\n\nThis will render an input that starts off with an empty value. Any user input will be immediately reflected by the rendered element. If you wanted to listen to updates to the value, you could use the onChange event just like you can with controlled components.\n\nIf you want to initialize the component with a non-empty value, you can supply a defaultValue prop. For example:\n\n  render: function() {\n    return &lt;input type=&quot;text&quot; defaultValue=&quot;Hello!&quot; /&gt;;\n  }\n\n\nThis example will function much like the Controlled Components example above.\n\nLikewise, &lt;input&gt; supports defaultChecked and &lt;select&gt; supports defaultValue.\n\nAdvanced Topics #Why Controlled Components? #\nUsing form components such as &lt;input&gt; in React presents a challenge that is absent when writing traditional form HTML. For example, in HTML:\n  &lt;input type=&quot;text&quot; name=&quot;title&quot; value=&quot;Untitled&quot; /&gt;\n\nThis renders an input initialized with the value, Untitled. When the user updates the input, the node&#39;s value property will change. However, node.getAttribute(&#39;value&#39;) will still return the value used at initialization time, Untitled.\n\nUnlike HTML, React components must represent the state of the view at any point in time and not only at initialization time. For example, in React:\n\n  render: function() {\n    return &lt;input type=&quot;text&quot; name=&quot;title&quot; value=&quot;Untitled&quot; /&gt;;\n  }\n\n\nSince this method describes the view at any point in time, the value of the text input should always be Untitled.\n\nWhy Textarea Value? #\n\nIn HTML, the value of &lt;textarea&gt; is usually set using its children:\n\n  &lt;!-- counterexample: DO NOT DO THIS! --&gt;\n  &lt;textarea name=&quot;description&quot;&gt;This is the description.&lt;/textarea&gt;\n\n\nFor HTML, this easily allows developers to supply multiline values. However, since React is JavaScript, we do not have string limitations and can use \\n if we want newlines. In a world where we have value and defaultValue, it is ambiguous what role children play. For this reason, you should not use children when setting &lt;textarea&gt; values:\n\n  &lt;textarea name=&quot;description&quot; value=&quot;This is a description.&quot; /&gt;\n\n\nIf you do decide to use children, they will behave like defaultValue.\n\nWhy Select Value? #\n\nThe selected &lt;option&gt; in an HTML &lt;select&gt; is normally specified through that option&#39;s selected attribute. In React, in order to make components easier to manipulate, the following format is adopted instead:\n\n  &lt;select value=&quot;B&quot;&gt;\n    &lt;option value=&quot;A&quot;&gt;Apple&lt;/option&gt;\n    &lt;option value=&quot;B&quot;&gt;Banana&lt;/option&gt;\n    &lt;option value=&quot;C&quot;&gt;Cranberry&lt;/option&gt;\n  &lt;/select&gt;\n\n\nTo make an uncontrolled component, defaultValue is used instead.\n\n\nNote:\n\nYou can pass an array into the value attribute, allowing you to select multiple options in a select tag: &lt;select multiple={true} value={[&#39;B&#39;, &#39;C&#39;]}&gt;.\n\n",
        "link": "/articles/forms.html",
        "date": "3007-01-01 00:00:00 +0800",
        "excerpt": "",
        "seach_omit": ""
    }
    
    

    
    ,{
        "title": "transferring-props",
        "content": "It&#39;s a common pattern in React to wrap a component in an abstraction. The outer component exposes a simple property to do something that might have more complex implementation details.\n\nYou can use JSX spread attributes to merge the old props with additional values:\n\n&lt;Component {...this.props} more=&quot;values&quot; /&gt;\n\n\nIf you don&#39;t use JSX, you can use any object helper such as ES6 Object.assign or Underscore _.extend:\n\nReact.createElement(Component, Object.assign({}, this.props, { more: &#39;values&#39; }));\n\n\nThe rest of this tutorial explains best practices. It uses JSX and experimental ES7 syntax.\n\nManual Transfer #\n\nMost of the time you should explicitly pass the properties down. That ensures that you only expose a subset of the inner API, one that you know will work.\n\nvar FancyCheckbox = React.createClass({\n  render: function() {\n    var fancyClass = this.props.checked ? &#39;FancyChecked&#39; : &#39;FancyUnchecked&#39;;\n    return (\n      &lt;div className={fancyClass} onClick={this.props.onClick}&gt;\n        {this.props.children}\n      &lt;/div&gt;\n    );\n  }\n});\nReact.render(\n  &lt;FancyCheckbox checked={true} onClick={console.log.bind(console)}&gt;\n    Hello world!\n  &lt;/FancyCheckbox&gt;,\n  document.getElementById(&#39;example&#39;)\n);\n\n\nBut what about the name prop? Or the title prop? Or onMouseOver?\n\nTransferring with ... in JSX #\n\n\nNOTE:\n\nIn the example below, the --harmony flag is required as this syntax is an experimental ES7 syntax. If using the in-browser JSX transformer, simply open your script with &lt;script type=&quot;text/jsx;harmony=true&quot;&gt;. See the Rest and Spread Properties ... section below for more details.\n\n\nSometimes it&#39;s fragile and tedious to pass every property along. In that case you can use destructuring assignment with rest properties to extract a set of unknown properties.\n\nList out all the properties that you would like to consume, followed by ...other.\n\nvar { checked, ...other } = this.props;\n\n\nThis ensures that you pass down all the props EXCEPT the ones you&#39;re consuming yourself.\n\nvar FancyCheckbox = React.createClass({\n  render: function() {\n    var { checked, ...other } = this.props;\n    var fancyClass = checked ? &#39;FancyChecked&#39; : &#39;FancyUnchecked&#39;;\n    // `other` contains { onClick: console.log } but not the checked property\n    return (\n      &lt;div {...other} className={fancyClass} /&gt;\n    );\n  }\n});\nReact.render(\n  &lt;FancyCheckbox checked={true} onClick={console.log.bind(console)}&gt;\n    Hello world!\n  &lt;/FancyCheckbox&gt;,\n  document.getElementById(&#39;example&#39;)\n);\n\n\n\nNOTE:\n\nIn the example above, the checked prop is also a valid DOM attribute. If you didn&#39;t use destructuring in this way you might inadvertently pass it along.\n\n\nAlways use the destructuring pattern when transferring unknown other props.\n\nvar FancyCheckbox = React.createClass({\n  render: function() {\n    var fancyClass = this.props.checked ? &#39;FancyChecked&#39; : &#39;FancyUnchecked&#39;;\n    // ANTI-PATTERN: `checked` would be passed down to the inner component\n    return (\n      &lt;div {...this.props} className={fancyClass} /&gt;\n    );\n  }\n});\nConsuming and Transferring the Same Prop #\nIf your component wants to consume a property but also wants to pass it along, you can repass it explicitly with checked={checked}. This is preferable to passing the full this.props object since it&#39;s easier to refactor and lint.\nvar FancyCheckbox = React.createClass({\n  render: function() {\n    var { checked, title, ...other } = this.props;\n    var fancyClass = checked ? &#39;FancyChecked&#39; : &#39;FancyUnchecked&#39;;\n    var fancyTitle = checked ? &#39;X &#39; + title : &#39;O &#39; + title;\n    return (\n      &lt;label&gt;\n        &lt;input {...other}\n          checked={checked}\n          className={fancyClass}\n          type=&quot;checkbox&quot;\n        /&gt;\n        {fancyTitle}\n      &lt;/label&gt;\n    );\n  }\n});\n\n\n\nNOTE:\n\nOrder matters. By putting the {...other} before your JSX props you ensure that the consumer of your component can&#39;t override them. In the example above we have guaranteed that the input will be of type &quot;checkbox&quot;.\n\n\nRest and Spread Properties ... #\n\nRest properties allow you to extract the remaining properties from an object into a new object. It excludes every other property listed in the destructuring pattern.\n\nThis is an experimental implementation of an ES7 proposal.\n\nvar { x, y, ...z } = { x: 1, y: 2, a: 3, b: 4 };\nx; // 1\ny; // 2\nz; // { a: 3, b: 4 }\n\n\n\nNote:\n\nUse the JSX command-line tool with the --harmony flag to activate the experimental ES7 syntax.\n\n\nTransferring with Underscore #\n\nIf you don&#39;t use JSX, you can use a library to achieve the same pattern. Underscore supports _.omit to filter out properties and _.extend to copy properties onto a new object.\n\nvar FancyCheckbox = React.createClass({\n  render: function() {\n    var checked = this.props.checked;\n    var other = _.omit(this.props, &#39;checked&#39;);\n    var fancyClass = checked ? &#39;FancyChecked&#39; : &#39;FancyUnchecked&#39;;\n    return (\n      React.DOM.div(_.extend({}, other, { className: fancyClass }))\n    );\n  }\n});\n\n",
        "link": "/articles/transferring-props.html",
        "date": "3006-01-01 00:00:00 +0800",
        "excerpt": "",
        "seach_omit": ""
    }
    
    

    
    ,{
        "title": "reuseable-components",
        "content": "When designing interfaces, break down the common design elements (buttons, form fields, layout components, etc.) into reusable components with well-defined interfaces. That way, the next time you need to build some UI, you can write much less code. This means faster development time, fewer bugs, and fewer bytes down the wire.\n\nProp Validation #\n\nAs your app grows it&#39;s helpful to ensure that your components are used correctly. We do this by allowing you to specify propTypes. React.PropTypes exports a range of validators that can be used to make sure the data you receive is valid. When an invalid value is provided for a prop, a warning will be shown in the JavaScript console. Note that for performance reasons propTypes is only checked in development mode. Here is an example documenting the different validators provided:\n\nReact.createClass({\n  propTypes: {\n    // You can declare that a prop is a specific JS primitive. By default, these\n    // are all optional.\n    optionalArray: React.PropTypes.array,\n    optionalBool: React.PropTypes.bool,\n    optionalFunc: React.PropTypes.func,\n    optionalNumber: React.PropTypes.number,\n    optionalObject: React.PropTypes.object,\n    optionalString: React.PropTypes.string,\n\n    // Anything that can be rendered: numbers, strings, elements or an array\n    // (or fragment) containing these types.\n    optionalNode: React.PropTypes.node,\n\n    // A React element.\n    optionalElement: React.PropTypes.element,\n\n    // You can also declare that a prop is an instance of a class. This uses\n    // JS&#39;s instanceof operator.\n    optionalMessage: React.PropTypes.instanceOf(Message),\n\n    // You can ensure that your prop is limited to specific values by treating\n    // it as an enum.\n    optionalEnum: React.PropTypes.oneOf([&#39;News&#39;, &#39;Photos&#39;]),\n\n    // An object that could be one of many types\n    optionalUnion: React.PropTypes.oneOfType([\n      React.PropTypes.string,\n      React.PropTypes.number,\n      React.PropTypes.instanceOf(Message)\n    ]),\n\n    // An array of a certain type\n    optionalArrayOf: React.PropTypes.arrayOf(React.PropTypes.number),\n\n    // An object with property values of a certain type\n    optionalObjectOf: React.PropTypes.objectOf(React.PropTypes.number),\n\n    // An object taking on a particular shape\n    optionalObjectWithShape: React.PropTypes.shape({\n      color: React.PropTypes.string,\n      fontSize: React.PropTypes.number\n    }),\n\n    // You can chain any of the above with `isRequired` to make sure a warning\n    // is shown if the prop isn&#39;t provided.\n    requiredFunc: React.PropTypes.func.isRequired,\n\n    // A value of any data type\n    requiredAny: React.PropTypes.any.isRequired,\n\n    // You can also specify a custom validator. It should return an Error\n    // object if the validation fails. Don&#39;t `console.warn` or throw, as this\n    // won&#39;t work inside `oneOfType`.\n    customProp: function(props, propName, componentName) {\n      if (!/matchme/.test(props[propName])) {\n        return new Error(&#39;Validation failed!&#39;);\n      }\n    }\n  },\n  /* ... */\n});\nDefault Prop Values #\nReact lets you define default values for your props in a very declarative way:\nvar ComponentWithDefaultProps = React.createClass({\n  getDefaultProps: function() {\n    return {\n      value: &#39;default value&#39;\n    };\n  }\n  /* ... */\n});\n\n\nThe result of getDefaultProps() will be cached and used to ensure that this.props.value will have a value if it was not specified by the parent component. This allows you to safely just use your props without having to write repetitive and fragile code to handle that yourself.\n\nTransferring Props: A Shortcut #\n\nA common type of React component is one that extends a basic HTML element in a simple way. Often you&#39;ll want to copy any HTML attributes passed to your component to the underlying HTML element to save typing. You can use the JSX spread syntax to achieve this:\n\nvar CheckLink = React.createClass({\n  render: function() {\n    // This takes any props passed to CheckLink and copies them to &lt;a&gt;\n    return &lt;a {...this.props}&gt;{&#39;√ &#39;}{this.props.children}&lt;/a&gt;;\n  }\n});\n\nReact.render(\n  &lt;CheckLink href=&quot;/checked.html&quot;&gt;\n    Click here!\n  &lt;/CheckLink&gt;,\n  document.getElementById(&#39;example&#39;)\n);\nSingle Child #\nWith React.PropTypes.element you can specify that only a single child can be passed to\na component as children.\nvar MyComponent = React.createClass({\n  propTypes: {\n    children: React.PropTypes.element.isRequired\n  },\n\n  render: function() {\n    return (\n      &lt;div&gt;\n        {this.props.children} // This must be exactly one element or it will throw.\n      &lt;/div&gt;\n    );\n  }\n\n});\nMixins #\nComponents are the best way to reuse code in React, but sometimes very different components may share some common functionality. These are sometimes called cross-cutting concerns. React provides mixins to solve this problem.\n\nOne common use case is a component wanting to update itself on a time interval. It&#39;s easy to use setInterval(), but it&#39;s important to cancel your interval when you don&#39;t need it anymore to save memory. React provides lifecycle methods that let you know when a component is about to be created or destroyed. Let&#39;s create a simple mixin that uses these methods to provide an easy setInterval() function that will automatically get cleaned up when your component is destroyed.\nvar SetIntervalMixin = {\n  componentWillMount: function() {\n    this.intervals = [];\n  },\n  setInterval: function() {\n    this.intervals.push(setInterval.apply(null, arguments));\n  },\n  componentWillUnmount: function() {\n    this.intervals.forEach(clearInterval);\n  }\n};\n\nvar TickTock = React.createClass({\n  mixins: [SetIntervalMixin], // Use the mixin\n  getInitialState: function() {\n    return {seconds: 0};\n  },\n  componentDidMount: function() {\n    this.setInterval(this.tick, 1000); // Call a method on the mixin\n  },\n  tick: function() {\n    this.setState({seconds: this.state.seconds + 1});\n  },\n  render: function() {\n    return (\n      &lt;p&gt;\n        React has been running for {this.state.seconds} seconds.\n      &lt;/p&gt;\n    );\n  }\n});\n\nReact.render(\n  &lt;TickTock /&gt;,\n  document.getElementById(&#39;example&#39;)\n);\n\n\nA nice feature of mixins is that if a component is using multiple mixins and several mixins define the same lifecycle method (i.e. several mixins want to do some cleanup when the component is destroyed), all of the lifecycle methods are guaranteed to be called. Methods defined on mixins run in the order mixins were listed, followed by a method call on the component.\n\nES6 Classes #\n\nYou may also define your React classes as a plain JavaScript class. For example using ES6 class syntax:\n\nclass HelloMessage extends React.Component {\n  render() {\n    return &lt;div&gt;Hello {this.props.name}&lt;/div&gt;;\n  }\n}\nReact.render(&lt;HelloMessage name=&quot;Sebastian&quot; /&gt;, mountNode);\n\n\nThe API is similar to React.createClass with the exception of getInitialState. Instead of providing a separate getInitialState method, you set up your own state property in the constructor.\n\nAnother difference is that propTypes and defaultProps are defined as properties on the constructor instead of in the class body.\n\nexport class Counter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {count: props.initialCount};\n  }\n  tick() {\n    this.setState({count: this.state.count + 1});\n  }\n  render() {\n    return (\n      &lt;div onClick={this.tick.bind(this)}&gt;\n        Clicks: {this.state.count}\n      &lt;/div&gt;\n    );\n  }\n}\nCounter.propTypes = { initialCount: React.PropTypes.number };\nCounter.defaultProps = { initialCount: 0 };\nNo Autobinding #\nMethods follow the same semantics as regular ES6 classes, meaning that they don&#39;t automatically bind this to the instance. You&#39;ll have to explicitly use .bind(this) or arrow functions =&gt;.\nNo Mixins #\nUnfortunately ES6 launched without any mixin support. Therefore, there is no support for mixins when you use React with ES6 classes. Instead, we&#39;re working on making it easier to support such use cases without resorting to mixins.\n",
        "link": "/articles/reusable-components.html",
        "date": "3005-01-01 00:00:00 +0800",
        "excerpt": "",
        "seach_omit": ""
    }
    
    

    
    ,{
        "title": "multiple-components",
        "content": "So far, we&#39;ve looked at how to write a single component to display data and handle user input. Next let&#39;s examine one of React&#39;s finest features: composability.\n\nMotivation: Separation of Concerns #\n\nBy building modular components that reuse other components with well-defined interfaces, you get much of the same benefits that you get by using functions or classes. Specifically you can separate the different concerns of your app however you please simply by building new components. By building a custom component library for your application, you are expressing your UI in a way that best fits your domain.\n\nComposition Example #\n\nLet&#39;s create a simple Avatar component which shows a profile picture and username using the Facebook Graph API.\n\nvar Avatar = React.createClass({\n  render: function() {\n    return (\n      &lt;div&gt;\n        &lt;ProfilePic username={this.props.username} /&gt;\n        &lt;ProfileLink username={this.props.username} /&gt;\n      &lt;/div&gt;\n    );\n  }\n});\n\nvar ProfilePic = React.createClass({\n  render: function() {\n    return (\n      &lt;img src={&#39;https://graph.facebook.com/&#39; + this.props.username + &#39;/picture&#39;} /&gt;\n    );\n  }\n});\n\nvar ProfileLink = React.createClass({\n  render: function() {\n    return (\n      &lt;a href={&#39;https://www.facebook.com/&#39; + this.props.username}&gt;\n        {this.props.username}\n      &lt;/a&gt;\n    );\n  }\n});\n\nReact.render(\n  &lt;Avatar username=&quot;pwh&quot; /&gt;,\n  document.getElementById(&#39;example&#39;)\n);\nOwnership #\nIn the above example, instances of Avatar own instances of ProfilePic and ProfileLink. In React, an owner is the component that sets the props of other components. More formally, if a component X is created in component Y&#39;s render() method, it is said that X is owned by Y. As discussed earlier, a component cannot mutate its props — they are always consistent with what its owner sets them to. This key property leads to UIs that are guaranteed to be consistent.\n\nIt&#39;s important to draw a distinction between the owner-ownee relationship and the parent-child relationship. The owner-ownee relationship is specific to React, while the parent-child relationship is simply the one you know and love from the DOM. In the example above, Avatar owns the div, ProfilePic and ProfileLink instances, and div is the parent (but not owner) of the ProfilePic and ProfileLink instances.\nChildren #\nWhen you create a React component instance, you can include additional React components or JavaScript expressions between the opening and closing tags like this:\n&lt;Parent&gt;&lt;Child /&gt;&lt;/Parent&gt;\n\n\nParent can read its children by accessing the special this.props.children prop. this.props.children is an opaque data structure: use the React.Children utilities to manipulate them.\n\nChild Reconciliation #\n\nReconciliation is the process by which React updates the DOM with each new render pass. In general, children are reconciled according to the order in which they are rendered. For example, suppose two render passes generate the following respective markup:\n\n// Render Pass 1\n&lt;Card&gt;\n  &lt;p&gt;Paragraph 1&lt;/p&gt;\n  &lt;p&gt;Paragraph 2&lt;/p&gt;\n&lt;/Card&gt;\n// Render Pass 2\n&lt;Card&gt;\n  &lt;p&gt;Paragraph 2&lt;/p&gt;\n&lt;/Card&gt;\n\n\nIntuitively, &lt;p&gt;Paragraph 1&lt;/p&gt; was removed. Instead, React will reconcile the DOM by changing the text content of the first child and destroying the last child. React reconciles according to the order of the children.\n\nStateful Children #\n\nFor most components, this is not a big deal. However, for stateful components that maintain data in this.state across render passes, this can be very problematic.\n\nIn most cases, this can be sidestepped by hiding elements instead of destroying them:\n\n// Render Pass 1\n&lt;Card&gt;\n  &lt;p&gt;Paragraph 1&lt;/p&gt;\n  &lt;p&gt;Paragraph 2&lt;/p&gt;\n&lt;/Card&gt;\n// Render Pass 2\n&lt;Card&gt;\n  &lt;p style={{display: &#39;none&#39;}}&gt;Paragraph 1&lt;/p&gt;\n  &lt;p&gt;Paragraph 2&lt;/p&gt;\n&lt;/Card&gt;\nDynamic Children #\nThe situation gets more complicated when the children are shuffled around (as in search results) or if new components are added onto the front of the list (as in streams). In these cases where the identity and state of each child must be maintained across render passes, you can uniquely identify each child by assigning it a key:\n  render: function() {\n    var results = this.props.results;\n    return (\n      &lt;ol&gt;\n        {results.map(function(result) {\n          return &lt;li key={result.id}&gt;{result.text}&lt;/li&gt;;\n        })}\n      &lt;/ol&gt;\n    );\n  }\n\n\nWhen React reconciles the keyed children, it will ensure that any child with key will be reordered (instead of clobbered) or destroyed (instead of reused).\n\nThe key should always be supplied directly to the components in the array, not to the container HTML child of each component in the array:\n\n// WRONG!\nvar ListItemWrapper = React.createClass({\n  render: function() {\n    return &lt;li key={this.props.data.id}&gt;{this.props.data.text}&lt;/li&gt;;\n  }\n});\nvar MyComponent = React.createClass({\n  render: function() {\n    return (\n      &lt;ul&gt;\n        {this.props.results.map(function(result) {\n          return &lt;ListItemWrapper data={result}/&gt;;\n        })}\n      &lt;/ul&gt;\n    );\n  }\n});\n\n// Correct :)\nvar ListItemWrapper = React.createClass({\n  render: function() {\n    return &lt;li&gt;{this.props.data.text}&lt;/li&gt;;\n  }\n});\nvar MyComponent = React.createClass({\n  render: function() {\n    return (\n      &lt;ul&gt;\n        {this.props.results.map(function(result) {\n           return &lt;ListItemWrapper key={result.id} data={result}/&gt;;\n        })}\n      &lt;/ul&gt;\n    );\n  }\n});\n\n\nYou can also key children by passing a ReactFragment object. See Keyed Fragments for more details.\n\nData Flow #\n\nIn React, data flows from owner to owned component through props as discussed above. This is effectively one-way data binding: owners bind their owned component&#39;s props to some value the owner has computed based on its props or state. Since this process happens recursively, data changes are automatically reflected everywhere they are used.\n\nA Note on Performance #\n\nYou may be thinking that it&#39;s expensive to change data if there are a large number of nodes under an owner. The good news is that JavaScript is fast and render() methods tend to be quite simple, so in most applications this is extremely fast. Additionally, the bottleneck is almost always the DOM mutation and not JS execution. React will optimize this for you using batching and change detection.\n\nHowever, sometimes you really want to have fine-grained control over your performance. In that case, simply override shouldComponentUpdate() to return false when you want React to skip processing of a subtree. See the React reference docs for more information.\n\n\nNote:\n\nIf shouldComponentUpdate() returns false when data has actually changed, React can&#39;t keep your UI in sync. Be sure you know what you&#39;re doing while using it, and only use this function when you have a noticeable performance problem. Don&#39;t underestimate how fast JavaScript is relative to the DOM.\n\n",
        "link": "/articles/multiple-components.html",
        "date": "3004-01-01 00:00:00 +0800",
        "excerpt": "",
        "seach_omit": ""
    }
    
    

    
    ,{
        "title": "jsx-in-depth",
        "content": "You&#39;ve already learned how to display data with React. Now let&#39;s look at how to make our UIs interactive.\n\nA Simple Example #var LikeButton = React.createClass({\n  getInitialState: function() {\n    return {liked: false};\n  },\n  handleClick: function(event) {\n    this.setState({liked: !this.state.liked});\n  },\n  render: function() {\n    var text = this.state.liked ? &#39;like&#39; : &#39;haven\\&#39;t liked&#39;;\n    return (\n      &lt;p onClick={this.handleClick}&gt;\n        You {text} this. Click to toggle.\n      &lt;/p&gt;\n    );\n  }\n});\n\nReact.render(\n  &lt;LikeButton /&gt;,\n  document.getElementById(&#39;example&#39;)\n);\nEvent Handling and Synthetic Events #\n\nWith React you simply pass your event handler as a camelCased prop similar to how you&#39;d do it in normal HTML. React ensures that all events behave identically in IE8 and above by implementing a synthetic event system. That is, React knows how to bubble and capture events according to the spec, and the events passed to your event handler are guaranteed to be consistent with the W3C spec, regardless of which browser you&#39;re using.\n\nUnder the Hood: Autobinding and Event Delegation #\n\nUnder the hood, React does a few things to keep your code performant and easy to understand.\n\nAutobinding: When creating callbacks in JavaScript, you usually need to explicitly bind a method to its instance such that the value of this is correct. With React, every method is automatically bound to its component instance. React caches the bound method such that it&#39;s extremely CPU and memory efficient. It&#39;s also less typing!\n\nEvent delegation: React doesn&#39;t actually attach event handlers to the nodes themselves. When React starts up, it starts listening for all events at the top level using a single event listener. When a component is mounted or unmounted, the event handlers are simply added or removed from an internal mapping. When an event occurs, React knows how to dispatch it using this mapping. When there are no event handlers left in the mapping, React&#39;s event handlers are simple no-ops. To learn more about why this is fast, see David Walsh&#39;s excellent blog post.\n\nComponents are Just State Machines #\n\nReact thinks of UIs as simple state machines. By thinking of a UI as being in various states and rendering those states, it&#39;s easy to keep your UI consistent.\n\nIn React, you simply update a component&#39;s state, and then render a new UI based on this new state. React takes care of updating the DOM for you in the most efficient way.\n\nHow State Works #\n\nA common way to inform React of a data change is by calling setState(data, callback). This method merges data into this.state and re-renders the component. When the component finishes re-rendering, the optional callback is called. Most of the time you&#39;ll never need to provide a callback since React will take care of keeping your UI up-to-date for you.\n\nWhat Components Should Have State? #\n\nMost of your components should simply take some data from props and render it. However, sometimes you need to respond to user input, a server request or the passage of time. For this you use state.\n\nTry to keep as many of your components as possible stateless. By doing this you&#39;ll isolate the state to its most logical place and minimize redundancy, making it easier to reason about your application.\n\nA common pattern is to create several stateless components that just render data, and have a stateful component above them in the hierarchy that passes its state to its children via props. The stateful component encapsulates all of the interaction logic, while the stateless components take care of rendering data in a declarative way.\n\nWhat Should Go in State? #\n\nState should contain data that a component&#39;s event handlers may change to trigger a UI update. In real apps this data tends to be very small and JSON-serializable. When building a stateful component, think about the minimal possible representation of its state, and only store those properties in this.state. Inside of render() simply compute any other information you need based on this state. You&#39;ll find that thinking about and writing applications in this way tends to lead to the most correct application, since adding redundant or computed values to state means that you need to explicitly keep them in sync rather than rely on React computing them for you.\n\nWhat Shouldn’t Go in State? #\n\nthis.state should only contain the minimal amount of data needed to represent your UI&#39;s state. As such, it should not contain:\n\n\nComputed data: Don&#39;t worry about precomputing values based on state — it&#39;s easier to ensure that your UI is consistent if you do all computation within render(). For example, if you have an array of list items in state and you want to render the count as a string, simply render this.state.listItems.length + &#39; list items&#39; in your render() method rather than storing it on state.\nReact components: Build them in render() based on underlying props and state.\nDuplicated data from props: Try to use props as the source of truth where possible. One valid use to store props in state is to be able to know its previous values, because props can change over time.\n\n",
        "link": "/articles/interactivity-and-dynamic-uis.html",
        "date": "3003-01-01 00:00:00 +0800",
        "excerpt": "",
        "seach_omit": ""
    }
    
    

    
    ,{
        "title": "displaying-data",
        "content": "The most basic thing you can do with a UI is display some data. React makes it easy to display data and automatically keeps the interface up-to-date when the data changes.\n\nGetting Started #\n\nLet&#39;s look at a really simple example. Create a hello-react.html file with the following code:\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;Hello React&lt;/title&gt;\n    &lt;script src=&quot;https://fb.me/react-.js&quot;&gt;&lt;/script&gt;\n    &lt;script src=&quot;https://fb.me/JSXTransformer-.js&quot;&gt;&lt;/script&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div id=&quot;example&quot;&gt;&lt;/div&gt;\n    &lt;script type=&quot;text/jsx&quot;&gt;\n\n      // ** Your code goes here! **\n\n    &lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n\n\nFor the rest of the documentation, we&#39;ll just focus on the JavaScript code and assume it&#39;s inserted into a template like the one above. Replace the placeholder comment above with the following JSX:\n\nvar HelloWorld = React.createClass({\n  render: function() {\n    return (\n      &lt;p&gt;\n        Hello, &lt;input type=&quot;text&quot; placeholder=&quot;Your name here&quot; /&gt;!\n        It is {this.props.date.toTimeString()}\n      &lt;/p&gt;\n    );\n  }\n});\n\nsetInterval(function() {\n  React.render(\n    &lt;HelloWorld date={new Date()} /&gt;,\n    document.getElementById(&#39;example&#39;)\n  );\n}, 500);\nReactive Updates #\nOpen hello-react.html in a web browser and type your name into the text field. Notice that React is only changing the time string in the UI — any input you put in the text field remains, even though you haven&#39;t written any code to manage this behavior. React figures it out for you and does the right thing.\n\nThe way we are able to figure this out is that React does not manipulate the DOM unless it needs to. It uses a fast, internal mock DOM to perform diffs and computes the most efficient DOM mutation for you.\n\nThe inputs to this component are called props — short for &quot;properties&quot;. They&#39;re passed as attributes in JSX syntax. You should think of these as immutable within the component, that is, never write to this.props.\nComponents are Just Like Functions #\nReact components are very simple. You can think of them as simple functions that take in props and state (discussed later) and render HTML. With this in mind, components are easy to reason about.\n\n\nNote:\n\nOne limitation: React components can only render a single root node. If you want to return multiple nodes they must be wrapped in a single root.\n\nJSX Syntax #\nWe strongly believe that components are the right way to separate concerns rather than &quot;templates&quot; and &quot;display logic.&quot; We think that markup and the code that generates it are intimately tied together. Additionally, display logic is often very complex and using template languages to express it becomes cumbersome.\n\nWe&#39;ve found that the best solution for this problem is to generate HTML and component trees directly from the JavaScript code such that you can use all of the expressive power of a real programming language to build UIs.\n\nIn order to make this easier, we&#39;ve added a very simple, optional HTML-like syntax to create these React tree nodes.\n\nJSX lets you create JavaScript objects using HTML syntax. To generate a link in React using pure JavaScript you&#39;d write:\n\nReact.createElement(&#39;a&#39;, {href: &#39;https://facebook.github.io/react/&#39;}, &#39;Hello!&#39;)\n\nWith JSX this becomes:\n\n&lt;a href=&quot;https://facebook.github.io/react/&quot;&gt;Hello!&lt;/a&gt;\n\nWe&#39;ve found this has made building React apps easier and designers tend to prefer the syntax, but everyone has their own workflow, so JSX is not required to use React.\n\nJSX is very small. To learn more about it, see JSX in depth. Or see the transform in action in our live JSX compiler.\n\nJSX is similar to HTML, but not exactly the same. See JSX gotchas for some key differences.\n\nThe easiest way to get started with JSX is to use the in-browser JSXTransformer. We strongly recommend that you don&#39;t use this in production. You can precompile your code using our command-line react-tools package.\nReact without JSX #\nJSX is completely optional; you don&#39;t have to use JSX with React. You can create React elements in plain JavaScript using React.createElement, which takes a tag name or component, a properties object, and variable number of optional child arguments.\nvar child1 = React.createElement(&#39;li&#39;, null, &#39;First Text Content&#39;);\nvar child2 = React.createElement(&#39;li&#39;, null, &#39;Second Text Content&#39;);\nvar root = React.createElement(&#39;ul&#39;, { className: &#39;my-list&#39; }, child1, child2);\nReact.render(root, document.getElementById(&#39;example&#39;));\n\n\nFor convenience, you can create short-hand factory functions to create elements from custom components.\n\nvar Factory = React.createFactory(ComponentClass);\n...\nvar root = Factory({ custom: &#39;prop&#39; });\nReact.render(root, document.getElementById(&#39;example&#39;));\n\n\nReact already has built-in factories for common HTML tags:\n\nvar root = React.DOM.ul({ className: &#39;my-list&#39; },\n             React.DOM.li(null, &#39;Text Content&#39;)\n           );\n\n",
        "link": "/articles/displaying-data.html",
        "date": "3002-01-01 00:00:00 +0800",
        "excerpt": "",
        "seach_omit": ""
    }
    
    

    
    ,{
        "title": "why-react",
        "content": "React is a JavaScript library for creating user interfaces by Facebook and Instagram. Many people choose to think of React as the V in MVC.\n\nWe built React to solve one problem: building large applications with data that changes over time. To do this, React uses two main ideas.\n\nSimple #\n\nSimply express how your app should look at any given point in time, and React will automatically manage all UI updates when your underlying data changes.\n\nDeclarative #\n\nWhen the data changes, React conceptually hits the &quot;refresh&quot; button, and knows to only update the changed parts.\n\nBuild Composable Components #\n\nReact is all about building reusable components. In fact, with React the only thing you do is build components. Since they&#39;re so encapsulated, components make code reuse, testing, and separation of concerns easy.\n\nGive It Five Minutes #\n\nReact challenges a lot of conventional wisdom, and at first glance some of the ideas may seem crazy. Give it five minutes while reading this guide; those crazy ideas have worked for building thousands of components both inside and outside of Facebook and Instagram.\n\nLearn More #\n\nYou can learn more about our motivations behind building React in this blog post.\n",
        "link": "/articles/why-react.html",
        "date": "3001-01-01 00:00:00 +0800",
        "excerpt": "",
        "seach_omit": ""
    }
    
    



    

    
    ,{
        "title": "Search",
        "content": "{% include search.html %}\n",
        "link": "/search/",
        "date": null,
        "excerpt": null,
        "seach_omit": ""
    }
    
    

    
    ,{
        "title": "协同发布文档 feature 展示",
        "content": "",
        "link": "/",
        "date": null,
        "excerpt": null,
        "seach_omit": ""
    }
    
    

    

    

]